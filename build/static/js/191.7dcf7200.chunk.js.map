{"version":3,"sources":["modules/userPages/UserPages/UnlockScreen.js"],"names":["useStyles","makeStyles","theme","logo","height","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","form","textField","button","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","password","required","id","UnlockScreen","classes","animation","delay","pb","py","xl","display","flex","flexDirection","alignItems","justifyContent","className","mb","xs","mr","src","alt","title","fontWeight","Fonts","BOLD","fontSize","component","validateOnChange","initialValues","onSubmit","data","resetForm","isSubmitting","lg","name","label","variant","type","color","disabled"],"mappings":"gPAYMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,KAAM,CACJC,OAAQ,IAEVC,MAAI,GACFC,SAAU,IACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,cAZT,GAeJK,KAAM,CACJN,UAAW,QAEbO,UAAW,CACTR,MAAO,QAETS,OAAQ,CACNT,MAAO,OACPH,OAAQ,QAINa,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,SAAUD,MAEPE,SAAS,kBAAC,IAAD,CAAcC,GAAG,mCAgFhBC,UA7EM,SAACb,GACpB,IAAMc,EAAUhC,EAAUkB,GAC1B,OACE,kBAAC,IAAD,CAAYe,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTC,QAAQ,OACRC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWX,EAAQ3B,MACvB,kBAAC,IAAD,CACEuC,GAAI,CAACC,GAAI,EAAGR,GAAI,GAChBC,QAAQ,OACRG,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAKI,GAAI,GACP,yBACEH,UAAWX,EAAQ7B,KACnB4C,IAAK,qCACLC,IAAI,QACJC,MAAM,WAGV,kBAAC,IAAD,CAAKC,WAAYC,IAAMC,KAAMC,SAAU,IACrC,kBAAC,IAAD,CAAcvB,GAAG,0BAIrB,kBAAC,IAAD,CAAKc,GAAI,CAACC,GAAI,EAAGR,GAAI,IAAKgB,SAAU,IAClC,kBAAC,IAAD,CAAYC,UAAU,KACpB,kBAAC,IAAD,CAAcxB,GAAG,gCAEnB,kBAAC,IAAD,CAAYwB,UAAU,KACpB,kBAAC,IAAD,CAAcxB,GAAG,iCAIrB,kBAAC,IAAD,CACEyB,kBAAkB,EAClBC,cAAe,CACb5B,SAAU,IAEZF,iBAAkBA,EAClB+B,SAAU,SAACC,EAAD,IACRC,EAD+B,EAAfA,gBAGjB,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMjB,UAAWX,EAAQlB,MACvB,kBAAC,IAAD,CAAK8B,GAAI,CAACC,GAAI,EAAGgB,GAAI,IACnB,kBAAC5C,EAAD,CACE6C,KAAK,WACLC,MAAO,kBAAC,IAAD,CAAcjC,GAAG,oBACxBa,UAAWX,EAAQjB,UACnBiD,QAAQ,WACRC,KAAK,cAGT,kBAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUP,EACVjB,UAAWX,EAAQhB,OACnBiD,KAAK,UACL,kBAAC,IAAD,CAAcnC,GAAG","file":"static/js/191.7dcf7200.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles, Typography} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    height: 24,\n  },\n  card: {\n    maxWidth: 576,\n    width: '100%',\n    textAlign: 'center',\n    padding: 32,\n    overflow: 'hidden',\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    [theme.breakpoints.up('lg')]: {\n      padding: 48,\n    },\n    [theme.breakpoints.up('xl')]: {\n      padding: '48px 64px',\n    },\n  },\n  form: {\n    textAlign: 'left',\n  },\n  textField: {\n    width: '100%',\n  },\n  button: {\n    width: '100%',\n    height: 44,\n  },\n}));\n\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  password: yup\n    .string()\n    .required(<IntlMessages id='validation.passwordRequired' />),\n});\n\nconst UnlockScreen = (props) => {\n  const classes = useStyles(props);\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Box\n            mb={{xs: 5, xl: 8}}\n            display='flex'\n            alignItems='center'\n            justifyContent='center'>\n            <Box mr={2}>\n              <img\n                className={classes.logo}\n                src={'/assets/images/logo-icon-large.png'}\n                alt='crema'\n                title='crema'\n              />\n            </Box>\n            <Box fontWeight={Fonts.BOLD} fontSize={20}>\n              <IntlMessages id='common.unlockScreen' />\n            </Box>\n          </Box>\n\n          <Box mb={{xs: 6, xl: 10}} fontSize={14}>\n            <Typography component='p'>\n              <IntlMessages id='common.unlockScreenTextOne' />\n            </Typography>\n            <Typography component='p'>\n              <IntlMessages id='common.unlockScreenTextTwo' />\n            </Typography>\n          </Box>\n\n          <Formik\n            validateOnChange={true}\n            initialValues={{\n              password: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(data, {resetForm}) => {\n              resetForm();\n            }}>\n            {({isSubmitting}) => (\n              <Form className={classes.form}>\n                <Box mb={{xs: 5, lg: 8}}>\n                  <MyTextField\n                    name='password'\n                    label={<IntlMessages id='common.password' />}\n                    className={classes.textField}\n                    variant='outlined'\n                    type='password'\n                  />\n                </Box>\n                <Button\n                  variant='contained'\n                  color='primary'\n                  disabled={isSubmitting}\n                  className={classes.button}\n                  type='submit'>\n                  <IntlMessages id='common.unlockItForMe' />\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default UnlockScreen;\n"],"sourceRoot":""}