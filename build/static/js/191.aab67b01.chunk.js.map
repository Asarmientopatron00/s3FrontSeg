{"version":3,"sources":["modules/userPages/UserPages/ResetPassword.js"],"names":["useStyles","makeStyles","theme","logo","height","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","form","textField","button","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","oldPassword","required","id","newPassword","confirmPassword","ResetPassword","classes","animation","delay","pb","py","xl","display","flex","flexDirection","alignItems","justifyContent","className","mb","xs","mr","src","alt","title","fontWeight","Fonts","BOLD","fontSize","validateOnChange","initialValues","onSubmit","data","setErrors","resetForm","isSubmitting","noValidate","autoComplete","name","label","variant","type","color","disabled"],"mappings":"uOAYMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,KAAM,CACJC,OAAQ,IAEVC,MAAI,GACFC,SAAU,IACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,cAZT,GAeJK,KAAM,CACJN,UAAW,QAEbO,UAAW,CACTR,MAAO,QAETS,OAAQ,CACNT,MAAO,OACPH,OAAQ,QAINa,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,YAAaD,MAEVE,SAAS,kBAAC,IAAD,CAAcC,GAAG,iCAC7BC,YAAaJ,MAEVE,SAAS,kBAAC,IAAD,CAAcC,GAAG,iCAC7BE,gBAAiBL,MAEdE,SAAS,kBAAC,IAAD,CAAcC,GAAG,iCAsGhBG,UAnGO,WACpB,IAAMC,EAAUlC,IAChB,OACE,kBAAC,IAAD,CAAYmC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTC,QAAQ,OACRC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWX,EAAQ7B,MACvB,kBAAC,IAAD,CACEyC,GAAI,CAACC,GAAI,EAAGR,GAAI,GAChBC,QAAQ,OACRG,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAKI,GAAI,GACP,yBACEH,UAAWX,EAAQ/B,KACnB8C,IAAK,qCACLC,IAAI,QACJC,MAAM,WAGV,kBAAC,IAAD,CAAKL,GAAI,IAAKM,WAAYC,IAAMC,KAAMC,SAAU,IAC9C,kBAAC,IAAD,CAAczB,GAAG,2BAIrB,kBAAC,IAAD,CACE0B,kBAAkB,EAClBC,cAAe,CACb7B,YAAa,GACbG,YAAa,GACbC,gBAAiB,IAEnBN,iBAAkBA,EAClBgC,SAAU,SAACC,EAAD,GAAmC,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UACvBF,EAAK5B,cAAgB4B,EAAK3B,gBAC5B4B,EAAU,CACR5B,gBACE,kBAAC,IAAD,CAAcF,GAAG,kCAIrB+B,OAGH,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMjB,UAAWX,EAAQpB,KAAMiD,YAAU,EAACC,aAAa,OACrD,kBAAC,IAAD,CAAKlB,GAAI,CAACC,GAAI,EAAGR,GAAI,IACnB,kBAACtB,EAAD,CACEgD,KAAK,cACLC,MAAO,kBAAC,IAAD,CAAcpC,GAAG,uBACxBe,UAAWX,EAAQnB,UACnBoD,QAAQ,WACRC,KAAK,cAIT,kBAAC,IAAD,CAAKtB,GAAI,CAACC,GAAI,EAAGR,GAAI,IACnB,kBAACtB,EAAD,CACEgD,KAAK,cACLC,MAAO,kBAAC,IAAD,CAAcpC,GAAG,uBACxBe,UAAWX,EAAQnB,UACnBoD,QAAQ,WACRC,KAAK,cAIT,kBAAC,IAAD,CAAKtB,GAAI,CAACC,GAAI,EAAGR,GAAI,IACnB,kBAACtB,EAAD,CACEgD,KAAK,kBACLC,MAAO,kBAAC,IAAD,CAAcpC,GAAG,0BACxBe,UAAWX,EAAQnB,UACnBoD,QAAQ,WACRC,KAAK,cAIT,kBAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUR,EACVjB,UAAWX,EAAQlB,OACnBoD,KAAK,UACL,kBAAC,IAAD,CAActC,GAAG","file":"static/js/191.aab67b01.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    height: 24,\n  },\n  card: {\n    maxWidth: 576,\n    width: '100%',\n    textAlign: 'center',\n    padding: 24,\n    overflow: 'hidden',\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    [theme.breakpoints.up('lg')]: {\n      padding: 32,\n    },\n    [theme.breakpoints.up('xl')]: {\n      padding: '48px 64px',\n    },\n  },\n  form: {\n    textAlign: 'left',\n  },\n  textField: {\n    width: '100%',\n  },\n  button: {\n    width: '100%',\n    height: 44,\n  },\n}));\n\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  oldPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.enterOldPassword' />),\n  newPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.enterNewPassword' />),\n  confirmPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.reTypePassword' />),\n});\n\nconst ResetPassword = () => {\n  const classes = useStyles();\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Box\n            mb={{xs: 5, xl: 8}}\n            display='flex'\n            alignItems='center'\n            justifyContent='center'>\n            <Box mr={2}>\n              <img\n                className={classes.logo}\n                src={'/assets/images/logo-icon-large.png'}\n                alt='crema'\n                title='crema'\n              />\n            </Box>\n            <Box mb={1.5} fontWeight={Fonts.BOLD} fontSize={20}>\n              <IntlMessages id='common.resetPassword' />\n            </Box>\n          </Box>\n\n          <Formik\n            validateOnChange={true}\n            initialValues={{\n              oldPassword: '',\n              newPassword: '',\n              confirmPassword: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(data, {setErrors, resetForm}) => {\n              if (data.newPassword !== data.confirmPassword) {\n                setErrors({\n                  confirmPassword: (\n                    <IntlMessages id='validation.passwordMisMatch' />\n                  ),\n                });\n              } else {\n                resetForm();\n              }\n            }}>\n            {({isSubmitting}) => (\n              <Form className={classes.form} noValidate autoComplete='off'>\n                <Box mb={{xs: 6, xl: 8}}>\n                  <MyTextField\n                    name='oldPassword'\n                    label={<IntlMessages id='common.oldPassword' />}\n                    className={classes.textField}\n                    variant='outlined'\n                    type='password'\n                  />\n                </Box>\n\n                <Box mb={{xs: 6, xl: 8}}>\n                  <MyTextField\n                    name='newPassword'\n                    label={<IntlMessages id='common.newPassword' />}\n                    className={classes.textField}\n                    variant='outlined'\n                    type='password'\n                  />\n                </Box>\n\n                <Box mb={{xs: 6, xl: 8}}>\n                  <MyTextField\n                    name='confirmPassword'\n                    label={<IntlMessages id='common.retypePassword' />}\n                    className={classes.textField}\n                    variant='outlined'\n                    type='password'\n                  />\n                </Box>\n\n                <Button\n                  variant='contained'\n                  color='primary'\n                  disabled={isSubmitting}\n                  className={classes.button}\n                  type='submit'>\n                  <IntlMessages id='common.resetMyPassword' />\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ResetPassword;\n"],"sourceRoot":""}