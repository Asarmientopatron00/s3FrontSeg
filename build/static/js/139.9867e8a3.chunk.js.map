{"version":3,"sources":["modules/muiComponents/feedback/Dialogs/SimpleDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/SimpleDialogs.js?6cd9","modules/muiComponents/feedback/Dialogs/AlertsDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/AlertsDialogs.js?b707","modules/muiComponents/feedback/Dialogs/TransitionsDialog.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/TransitionsDialog.js?9bf5","modules/muiComponents/feedback/Dialogs/FormDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/FormDialogs.js?8ced","modules/muiComponents/feedback/Dialogs/CustomizedDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/CustomizedDialogs.js?4ca7","modules/muiComponents/feedback/Dialogs/FullScreenDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/FullScreenDialogs.js?b501","modules/muiComponents/feedback/Dialogs/OptionalSizes.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/OptionalSizes.js?26d1","modules/muiComponents/feedback/Dialogs/ResponsiveFullScreen.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/ResponsiveFullScreen.js?e2dc","modules/muiComponents/feedback/Dialogs/DraggableDialog.js","modules/muiComponents/feedback/Dialogs/index.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/DraggableDialog.js?3397"],"names":["emails","useStyles","makeStyles","avatar","backgroundColor","blue","color","SimpleDialog","props","classes","onClose","selectedValue","open","handleListItemClick","value","Dialog","aria-labelledby","DialogTitle","id","List","map","email","ListItem","button","onClick","key","ListItemAvatar","Avatar","className","ListItemText","primary","SimpleDialogDemo","React","useState","setOpen","setSelectedValue","Typography","variant","Button","AlertDialog","handleClose","aria-describedby","DialogContent","DialogContentText","DialogActions","autoFocus","Transition","forwardRef","ref","Slide","direction","AlertDialogSlide","TransitionComponent","keepMounted","FormDialog","TextField","margin","label","type","fullWidth","withStyles","theme","root","padding","spacing","closeButton","position","right","top","palette","grey","children","disableTypography","IconButton","aria-label","MuiDialogContent","MuiDialogActions","CustomizedDialogs","dividers","gutterBottom","appBar","title","marginLeft","flex","FullScreenDialog","fullScreen","AppBar","Toolbar","edge","secondary","Divider","form","display","flexDirection","width","formControl","marginTop","minWidth","formControlLabel","MaxWidthDialog","setFullWidth","maxWidth","setMaxWidth","Fragment","noValidate","FormControl","InputLabel","htmlFor","Select","onChange","event","target","inputProps","name","MenuItem","FormControlLabel","control","Switch","checked","ResponsiveDialog","useTheme","useMediaQuery","breakpoints","down","PaperComponent","cancel","Paper","DraggableDialog","style","cursor","Dialogs","ComponentHeader","description","refUrl","GridContainer","Grid","item","xs","lg","ComponentCard","component","SimpleDialogs","source","AlertsDialogs","TransitionsDialog","FormDialogs","CustomizedDialogsSource","FullScreenDialogs","OptionalSizes","ResponsiveFullScreen","ResponsiveFullScreenSource"],"mappings":"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","file":"static/js/139.9867e8a3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport {blue} from '@material-ui/core/colors';\n\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n});\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const {onClose, selectedValue, open} = props;\n\n  function handleClose() {\n    onClose(selectedValue);\n  }\n\n  function handleListItemClick(value) {\n    onClose(value);\n  }\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby='simple-dialog-title'\n      open={open}>\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n      <List>\n        {emails.map((email) => (\n          <ListItem\n            button\n            onClick={() => handleListItemClick(email)}\n            key={email}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                <PersonIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={email} />\n          </ListItem>\n        ))}\n\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\n          <ListItemAvatar>\n            <Avatar>\n              <AddIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary='add account' />\n        </ListItem>\n      </List>\n    </Dialog>\n  );\n}\n\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};\n\nexport default function SimpleDialogDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <div>\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\n      <br />\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <SimpleDialog\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport {makeStyles} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\nimport Avatar from '@material-ui/core/Avatar';\\nimport List from '@material-ui/core/List';\\nimport ListItem from '@material-ui/core/ListItem';\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\nimport ListItemText from '@material-ui/core/ListItemText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport PersonIcon from '@material-ui/icons/Person';\\nimport AddIcon from '@material-ui/icons/Add';\\nimport Typography from '@material-ui/core/Typography';\\nimport {blue} from '@material-ui/core/colors';\\n\\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\\nconst useStyles = makeStyles({\\n  avatar: {\\n    backgroundColor: blue[100],\\n    color: blue[600],\\n  },\\n});\\n\\nfunction SimpleDialog(props) {\\n  const classes = useStyles();\\n  const {onClose, selectedValue, open} = props;\\n\\n  function handleClose() {\\n    onClose(selectedValue);\\n  }\\n\\n  function handleListItemClick(value) {\\n    onClose(value);\\n  }\\n\\n  return (\\n    <Dialog\\n      onClose={handleClose}\\n      aria-labelledby='simple-dialog-title'\\n      open={open}>\\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\\n      <List>\\n        {emails.map((email) => (\\n          <ListItem\\n            button\\n            onClick={() => handleListItemClick(email)}\\n            key={email}>\\n            <ListItemAvatar>\\n              <Avatar className={classes.avatar}>\\n                <PersonIcon />\\n              </Avatar>\\n            </ListItemAvatar>\\n            <ListItemText primary={email} />\\n          </ListItem>\\n        ))}\\n\\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\\n          <ListItemAvatar>\\n            <Avatar>\\n              <AddIcon />\\n            </Avatar>\\n          </ListItemAvatar>\\n          <ListItemText primary='add account' />\\n        </ListItem>\\n      </List>\\n    </Dialog>\\n  );\\n}\\n\\nSimpleDialog.propTypes = {\\n  onClose: PropTypes.func.isRequired,\\n  open: PropTypes.bool.isRequired,\\n  selectedValue: PropTypes.string.isRequired,\\n};\\n\\nexport default function SimpleDialogDemo() {\\n  const [open, setOpen] = React.useState(false);\\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  const handleClose = (value) => {\\n    setOpen(false);\\n    setSelectedValue(value);\\n  };\\n\\n  return (\\n    <div>\\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\\n      <br />\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open simple dialog\\n      </Button>\\n      <SimpleDialog\\n        selectedValue={selectedValue}\\n        open={open}\\n        onClose={handleClose}\\n      />\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'>\n        <DialogTitle id='alert-dialog-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary' autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\n\\nexport default function AlertDialog() {\\n  const [open, setOpen] = React.useState(false);\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open alert dialog\\n      </Button>\\n      <Dialog\\n        open={open}\\n        onClose={handleClose}\\n        aria-labelledby='alert-dialog-title'\\n        aria-describedby='alert-dialog-description'>\\n        <DialogTitle id='alert-dialog-title'>\\n          {\\\"Use Google's location service?\\\"}\\n        </DialogTitle>\\n        <DialogContent>\\n          <DialogContentText id='alert-dialog-description'>\\n            Let Google help apps determine location. This means sending\\n            anonymous location data to Google, even when no apps are running.\\n          </DialogContentText>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Disagree\\n          </Button>\\n          <Button onClick={handleClose} color='primary' autoFocus>\\n            Agree\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'>\n        <DialogTitle id='alert-dialog-slide-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport Slide from '@material-ui/core/Slide';\\n\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\n  return <Slide direction='up' ref={ref} {...props} />;\\n});\\n\\nexport default function AlertDialogSlide() {\\n  const [open, setOpen] = React.useState(false);\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Slide in alert dialog\\n      </Button>\\n      <Dialog\\n        open={open}\\n        TransitionComponent={Transition}\\n        keepMounted\\n        onClose={handleClose}\\n        aria-labelledby='alert-dialog-slide-title'\\n        aria-describedby='alert-dialog-slide-description'>\\n        <DialogTitle id='alert-dialog-slide-title'>\\n          {\\\"Use Google's location service?\\\"}\\n        </DialogTitle>\\n        <DialogContent>\\n          <DialogContentText id='alert-dialog-slide-description'>\\n            Let Google help apps determine location. This means sending\\n            anonymous location data to Google, even when no apps are running.\\n          </DialogContentText>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Disagree\\n          </Button>\\n          <Button onClick={handleClose} color='primary'>\\n            Agree\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function FormDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To subscribe to this website, please enter your email address here.\n            We will send updates occasionally.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin='dense'\n            id='name'\n            label='Email Address'\n            type='email'\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\n\\nexport default function FormDialog() {\\n  const [open, setOpen] = React.useState(false);\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open form dialog\\n      </Button>\\n      <Dialog\\n        open={open}\\n        onClose={handleClose}\\n        aria-labelledby='form-dialog-title'>\\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\\n        <DialogContent>\\n          <DialogContentText>\\n            To subscribe to this website, please enter your email address here.\\n            We will send updates occasionally.\\n          </DialogContentText>\\n          <TextField\\n            autoFocus\\n            margin='dense'\\n            id='name'\\n            label='Email Address'\\n            type='email'\\n            fullWidth\\n          />\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Cancel\\n          </Button>\\n          <Button onClick={handleClose} color='primary'>\\n            Subscribe\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const {children, classes, onClose} = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant='h6'>{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label='close'\n          className={classes.closeButton}\n          onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby='customized-dialog-title'\n        open={open}>\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\n          Modal title\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\n            ac consectetur ac, vestibulum at eros.\n          </Typography>\n          <Typography gutterBottom>\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n            auctor.\n          </Typography>\n          <Typography gutterBottom>\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport {withStyles} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\\nimport MuiDialogContent from '@material-ui/core/DialogContent';\\nimport MuiDialogActions from '@material-ui/core/DialogActions';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport CloseIcon from '@material-ui/icons/Close';\\nimport Typography from '@material-ui/core/Typography';\\n\\nconst styles = (theme) => ({\\n  root: {\\n    margin: 0,\\n    padding: theme.spacing(2),\\n  },\\n  closeButton: {\\n    position: 'absolute',\\n    right: theme.spacing(1),\\n    top: theme.spacing(1),\\n    color: theme.palette.grey[500],\\n  },\\n});\\n\\nconst DialogTitle = withStyles(styles)((props) => {\\n  const {children, classes, onClose} = props;\\n  return (\\n    <MuiDialogTitle disableTypography className={classes.root}>\\n      <Typography variant='h6'>{children}</Typography>\\n      {onClose ? (\\n        <IconButton\\n          aria-label='close'\\n          className={classes.closeButton}\\n          onClick={onClose}>\\n          <CloseIcon />\\n        </IconButton>\\n      ) : null}\\n    </MuiDialogTitle>\\n  );\\n});\\n\\nconst DialogContent = withStyles((theme) => ({\\n  root: {\\n    padding: theme.spacing(2),\\n  },\\n}))(MuiDialogContent);\\n\\nconst DialogActions = withStyles((theme) => ({\\n  root: {\\n    margin: 0,\\n    padding: theme.spacing(1),\\n  },\\n}))(MuiDialogActions);\\n\\nexport default function CustomizedDialogs() {\\n  const [open, setOpen] = React.useState(false);\\n\\n  const handleClickOpen = () => {\\n    setOpen(true);\\n  };\\n  const handleClose = () => {\\n    setOpen(false);\\n  };\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\\n        Open dialog\\n      </Button>\\n      <Dialog\\n        onClose={handleClose}\\n        aria-labelledby='customized-dialog-title'\\n        open={open}>\\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\\n          Modal title\\n        </DialogTitle>\\n        <DialogContent dividers>\\n          <Typography gutterBottom>\\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\\n            ac consectetur ac, vestibulum at eros.\\n          </Typography>\\n          <Typography gutterBottom>\\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\\n            auctor.\\n          </Typography>\\n          <Typography gutterBottom>\\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\\n          </Typography>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Save changes\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open full-screen dialog\n      </Button>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge='start'\n              color='inherit'\n              onClick={handleClose}\n              aria-label='close'>\n              <CloseIcon />\n            </IconButton>\n            <Typography variant='h6' className={classes.title}>\n              Sound\n            </Typography>\n            <Button color='inherit' onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          <ListItem button>\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\n          </ListItem>\n          <Divider />\n          <ListItem button>\n            <ListItemText\n              primary='Default notification ringtone'\n              secondary='Tethys'\n            />\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport {makeStyles} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport ListItemText from '@material-ui/core/ListItemText';\\nimport ListItem from '@material-ui/core/ListItem';\\nimport List from '@material-ui/core/List';\\nimport Divider from '@material-ui/core/Divider';\\nimport AppBar from '@material-ui/core/AppBar';\\nimport Toolbar from '@material-ui/core/Toolbar';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport Typography from '@material-ui/core/Typography';\\nimport CloseIcon from '@material-ui/icons/Close';\\nimport Slide from '@material-ui/core/Slide';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  appBar: {\\n    position: 'relative',\\n  },\\n  title: {\\n    marginLeft: theme.spacing(2),\\n    flex: 1,\\n  },\\n}));\\n\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\n  return <Slide direction='up' ref={ref} {...props} />;\\n});\\n\\nexport default function FullScreenDialog() {\\n  const classes = useStyles();\\n  const [open, setOpen] = React.useState(false);\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open full-screen dialog\\n      </Button>\\n      <Dialog\\n        fullScreen\\n        open={open}\\n        onClose={handleClose}\\n        TransitionComponent={Transition}>\\n        <AppBar className={classes.appBar}>\\n          <Toolbar>\\n            <IconButton\\n              edge='start'\\n              color='inherit'\\n              onClick={handleClose}\\n              aria-label='close'>\\n              <CloseIcon />\\n            </IconButton>\\n            <Typography variant='h6' className={classes.title}>\\n              Sound\\n            </Typography>\\n            <Button color='inherit' onClick={handleClose}>\\n              save\\n            </Button>\\n          </Toolbar>\\n        </AppBar>\\n        <List>\\n          <ListItem button>\\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\\n          </ListItem>\\n          <Divider />\\n          <ListItem button>\\n            <ListItemText\\n              primary='Default notification ringtone'\\n              secondary='Tethys'\\n            />\\n          </ListItem>\\n        </List>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: 'auto',\n    width: 'fit-content',\n  },\n  formControl: {\n    marginTop: theme.spacing(2),\n    minWidth: 120,\n  },\n  formControlLabel: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function MaxWidthDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleMaxWidthChange(event) {\n    setMaxWidth(event.target.value);\n  }\n\n  function handleFullWidthChange(event) {\n    setFullWidth(event.target.checked);\n  }\n\n  return (\n    <React.Fragment>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'>\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <form className={classes.form} noValidate>\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width',\n                }}>\n                <MenuItem value={false}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={\n                <Switch\n                  checked={fullWidth}\n                  onChange={handleFullWidthChange}\n                  value='fullWidth'\n                />\n              }\n              label='Full width'\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n","export default \"import React from 'react';\\nimport {makeStyles} from '@material-ui/core/styles';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport FormControl from '@material-ui/core/FormControl';\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\nimport InputLabel from '@material-ui/core/InputLabel';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport Select from '@material-ui/core/Select';\\nimport Switch from '@material-ui/core/Switch';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  form: {\\n    display: 'flex',\\n    flexDirection: 'column',\\n    margin: 'auto',\\n    width: 'fit-content',\\n  },\\n  formControl: {\\n    marginTop: theme.spacing(2),\\n    minWidth: 120,\\n  },\\n  formControlLabel: {\\n    marginTop: theme.spacing(1),\\n  },\\n}));\\n\\nexport default function MaxWidthDialog() {\\n  const classes = useStyles();\\n  const [open, setOpen] = React.useState(false);\\n  const [fullWidth, setFullWidth] = React.useState(true);\\n  const [maxWidth, setMaxWidth] = React.useState('sm');\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  function handleMaxWidthChange(event) {\\n    setMaxWidth(event.target.value);\\n  }\\n\\n  function handleFullWidthChange(event) {\\n    setFullWidth(event.target.checked);\\n  }\\n\\n  return (\\n    <React.Fragment>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open max-width dialog\\n      </Button>\\n      <Dialog\\n        fullWidth={fullWidth}\\n        maxWidth={maxWidth}\\n        open={open}\\n        onClose={handleClose}\\n        aria-labelledby='max-width-dialog-title'>\\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\\n        <DialogContent>\\n          <DialogContentText>\\n            You can set my maximum width and whether to adapt or not.\\n          </DialogContentText>\\n          <form className={classes.form} noValidate>\\n            <FormControl className={classes.formControl}>\\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\\n              <Select\\n                value={maxWidth}\\n                onChange={handleMaxWidthChange}\\n                inputProps={{\\n                  name: 'max-width',\\n                  id: 'max-width',\\n                }}>\\n                <MenuItem value={false}>false</MenuItem>\\n                <MenuItem value='xs'>xs</MenuItem>\\n                <MenuItem value='sm'>sm</MenuItem>\\n                <MenuItem value='md'>md</MenuItem>\\n                <MenuItem value='lg'>lg</MenuItem>\\n                <MenuItem value='xl'>xl</MenuItem>\\n              </Select>\\n            </FormControl>\\n            <FormControlLabel\\n              className={classes.formControlLabel}\\n              control={\\n                <Switch\\n                  checked={fullWidth}\\n                  onChange={handleFullWidthChange}\\n                  value='fullWidth'\\n                />\\n              }\\n              label='Full width'\\n            />\\n          </form>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Close\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </React.Fragment>\\n  );\\n}\\n\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {useTheme} from '@material-ui/core/styles';\n\nexport default function ResponsiveDialog() {\n  const [open, setOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary' autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\nimport {useTheme} from '@material-ui/core/styles';\\n\\nexport default function ResponsiveDialog() {\\n  const [open, setOpen] = React.useState(false);\\n  const theme = useTheme();\\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\\n\\n  function handleClickOpen() {\\n    setOpen(true);\\n  }\\n\\n  function handleClose() {\\n    setOpen(false);\\n  }\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open responsive dialog\\n      </Button>\\n      <Dialog\\n        fullScreen={fullScreen}\\n        open={open}\\n        onClose={handleClose}\\n        aria-labelledby='responsive-dialog-title'>\\n        <DialogTitle id='responsive-dialog-title'>\\n          {\\\"Use Google's location service?\\\"}\\n        </DialogTitle>\\n        <DialogContent>\\n          <DialogContentText>\\n            Let Google help apps determine location. This means sending\\n            anonymous location data to Google, even when no apps are running.\\n          </DialogContentText>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Disagree\\n          </Button>\\n          <Button onClick={handleClose} color='primary' autoFocus>\\n            Agree\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Paper from '@material-ui/core/Paper';\nimport Draggable from 'react-draggable';\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function DraggableDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        PaperComponent={PaperComponent}\n        aria-labelledby='draggable-dialog-title'>\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\n          Subscribe\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To subscribe to this website, please enter your email address here.\n            We will send updates occasionally.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport ComponentCard from '@crema/core/ComponentCard';\nimport ComponentHeader from '@crema/core/ComponentHeader';\nimport GridContainer from '@crema/core/GridContainer';\nimport SimpleDialogs from './SimpleDialogs';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimpleDialogsSource from '!raw-loader!./SimpleDialogs';\nimport AlertsDialogs from './AlertsDialogs';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AlertsDialogsSource from '!raw-loader!./AlertsDialogs';\nimport TransitionsDialog from './TransitionsDialog';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport TransitionsDialogSource from '!raw-loader!./TransitionsDialog';\nimport FormDialogs from './FormDialogs';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport FormDialogsSource from '!raw-loader!./FormDialogs';\nimport CustomizedDialogs from './CustomizedDialogs';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport CustomizedDialogsSource from '!raw-loader!./CustomizedDialogs';\nimport FullScreenDialogs from './FullScreenDialogs';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport FullScreenDialogsSource from '!raw-loader!./FullScreenDialogs';\nimport OptionalSizes from './OptionalSizes';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport OptionalSizesSource from '!raw-loader!./OptionalSizes';\nimport ResponsiveFullScreen from './ResponsiveFullScreen';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport ResponsiveFullScreenSource from '!raw-loader!./ResponsiveFullScreen';\n\nimport DraggableDialog from './DraggableDialog';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport DraggableDialogSource from '!raw-loader!./DraggableDialog';\n\nconst Dialogs = () => {\n  return (\n    <>\n      <ComponentHeader\n        title='Dialogs'\n        description='Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.'\n        refUrl='https://material-ui.com/components/dialogs/'\n      />\n\n      <GridContainer>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Simple Dialogs'\n            component={SimpleDialogs}\n            source={SimpleDialogsSource}\n            description='Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account)'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Alerts Dialogs'\n            component={AlertsDialogs}\n            source={AlertsDialogsSource}\n            description='Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Transitions'\n            component={TransitionsDialog}\n            source={TransitionsDialogSource}\n            description='You can also swap out the transition, the next example uses Slide.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Form dialogs'\n            component={FormDialogs}\n            source={FormDialogsSource}\n            description=\"Form dialogs allow users to fill out form fields within a dialog. For example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'. \"\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Customized dialogs'\n            component={CustomizedDialogs}\n            source={CustomizedDialogsSource}\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Customized dialogs'\n            component={CustomizedDialogs}\n            source={CustomizedDialogsSource}\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Full Screen Dialogs'\n            component={FullScreenDialogs}\n            source={FullScreenDialogsSource}\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Optional sizes'\n            component={OptionalSizes}\n            source={OptionalSizesSource}\n            description='You can set a dialog maximum width by using the maxWidth enumerable in combination with the fullWidth boolean. When the fullWidth property is true, the dialog will adapt based on the maxWidth value.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Responsive full-screen'\n            component={ResponsiveFullScreen}\n            source={ResponsiveFullScreenSource}\n            description='You may make a dialog responsively full screen using useMediaQuery.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Confirmation dialogs'\n            component={ResponsiveFullScreen}\n            source={ResponsiveFullScreenSource}\n            description='Confirmation dialogs require users to explicitly confirm their choice before an option is committed.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Scrolling long content'\n            component={ResponsiveFullScreen}\n            source={ResponsiveFullScreenSource}\n            description='When dialogs become too long for the user’s viewport or device, they scroll..'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Draggable dialog'\n            component={DraggableDialog}\n            source={DraggableDialogSource}\n            description='You can create a draggable dialog by using react-draggable. To do so, you can pass the the imported Draggable component as the PaperComponent of the Dialog component. This will make the entire dialog draggable..'\n          />\n        </Grid>\n      </GridContainer>\n    </>\n  );\n};\n\nexport default Dialogs;\n","export default \"import React from 'react';\\nimport Button from '@material-ui/core/Button';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport Paper from '@material-ui/core/Paper';\\nimport Draggable from 'react-draggable';\\n\\nfunction PaperComponent(props) {\\n  return (\\n    <Draggable cancel={'[class*=\\\"MuiDialogContent-root\\\"]'}>\\n      <Paper {...props} />\\n    </Draggable>\\n  );\\n}\\n\\nexport default function DraggableDialog() {\\n  const [open, setOpen] = React.useState(false);\\n\\n  const handleClickOpen = () => {\\n    setOpen(true);\\n  };\\n\\n  const handleClose = () => {\\n    setOpen(false);\\n  };\\n\\n  return (\\n    <div>\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\n        Open form dialog\\n      </Button>\\n      <Dialog\\n        open={open}\\n        onClose={handleClose}\\n        PaperComponent={PaperComponent}\\n        aria-labelledby='draggable-dialog-title'>\\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\\n          Subscribe\\n        </DialogTitle>\\n        <DialogContent>\\n          <DialogContentText>\\n            To subscribe to this website, please enter your email address here.\\n            We will send updates occasionally.\\n          </DialogContentText>\\n        </DialogContent>\\n        <DialogActions>\\n          <Button onClick={handleClose} color='primary'>\\n            Cancel\\n          </Button>\\n          <Button onClick={handleClose} color='primary'>\\n            Subscribe\\n          </Button>\\n        </DialogActions>\\n      </Dialog>\\n    </div>\\n  );\\n}\\n\";"],"sourceRoot":""}