(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[143],{3097:function(e,n,t){"use strict";t.r(n);var a=t(0),o=t.n(a),i=t(1086),l=t(306),r=t(304),c=t(303),s=t(22),m=t(164),u=t(499),p=t(464),d=t(1077),g=t(296),f=t(463),h=t(1124),C=t(1745),D=t(1282),y=t(96),b=t.n(y),v=t(1206),E=t.n(v),T=t(114),x=t(201),k=["username@gmail.com","user02@gmail.com"],S=Object(m.a)({avatar:{backgroundColor:x.a[100],color:x.a[600]}});function B(e){var n=S(),t=e.onClose,a=e.selectedValue,i=e.open;function l(e){t(e)}return o.a.createElement(D.a,{onClose:function(){t(a)},"aria-labelledby":"simple-dialog-title",open:i},o.a.createElement(C.a,{id:"simple-dialog-title"},"Set backup account"),o.a.createElement(d.a,null,k.map((function(e){return o.a.createElement(g.a,{button:!0,onClick:function(){return l(e)},key:e},o.a.createElement(f.a,null,o.a.createElement(p.a,{className:n.avatar},o.a.createElement(b.a,null))),o.a.createElement(h.a,{primary:e}))})),o.a.createElement(g.a,{button:!0,onClick:function(){return l("addAccount")}},o.a.createElement(f.a,null,o.a.createElement(p.a,null,o.a.createElement(E.a,null))),o.a.createElement(h.a,{primary:"add account"}))))}function O(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1],i=o.a.useState(k[1]),l=Object(s.a)(i,2),r=l[0],c=l[1];return o.a.createElement("div",null,o.a.createElement(T.a,{variant:"subtitle1"},"Selected: ",r),o.a.createElement("br",null),o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Open simple dialog"),o.a.createElement(B,{selectedValue:r,open:t,onClose:function(e){a(!1),c(e)}}))}var A=t(1410),I=t(1409),w=t(1529);function L(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1];function i(){a(!1)}return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Open alert dialog"),o.a.createElement(D.a,{open:t,onClose:i,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description"},o.a.createElement(C.a,{id:"alert-dialog-title"},"Use Google's location service?"),o.a.createElement(I.a,null,o.a.createElement(w.a,{id:"alert-dialog-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:i,color:"primary"},"Disagree"),o.a.createElement(u.a,{onClick:i,color:"primary",autoFocus:!0},"Agree"))))}var M=t(1092),W=o.a.forwardRef((function(e,n){return o.a.createElement(M.a,Object.assign({direction:"up",ref:n},e))}));function F(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1];function i(){a(!1)}return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Slide in alert dialog"),o.a.createElement(D.a,{open:t,TransitionComponent:W,keepMounted:!0,onClose:i,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description"},o.a.createElement(C.a,{id:"alert-dialog-slide-title"},"Use Google's location service?"),o.a.createElement(I.a,null,o.a.createElement(w.a,{id:"alert-dialog-slide-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:i,color:"primary"},"Disagree"),o.a.createElement(u.a,{onClick:i,color:"primary"},"Agree"))))}var R=t(1629);function j(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1];function i(){a(!1)}return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Open form dialog"),o.a.createElement(D.a,{open:t,onClose:i,"aria-labelledby":"form-dialog-title"},o.a.createElement(C.a,{id:"form-dialog-title"},"Subscribe"),o.a.createElement(I.a,null,o.a.createElement(w.a,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally."),o.a.createElement(R.a,{autoFocus:!0,margin:"dense",id:"name",label:"Email Address",type:"email",fullWidth:!0})),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:i,color:"primary"},"Cancel"),o.a.createElement(u.a,{onClick:i,color:"primary"},"Subscribe"))))}var P=t(21),G=t(485),N=t(123),V=t.n(N),q=Object(P.a)((function(e){return{root:{margin:0,padding:e.spacing(2)},closeButton:{position:"absolute",right:e.spacing(1),top:e.spacing(1),color:e.palette.grey[500]}}}))((function(e){var n=e.children,t=e.classes,a=e.onClose;return o.a.createElement(C.a,{disableTypography:!0,className:t.root},o.a.createElement(T.a,{variant:"h6"},n),a?o.a.createElement(G.a,{"aria-label":"close",className:t.closeButton,onClick:a},o.a.createElement(V.a,null)):null)})),z=Object(P.a)((function(e){return{root:{padding:e.spacing(2)}}}))(I.a),Y=Object(P.a)((function(e){return{root:{margin:0,padding:e.spacing(1)}}}))(A.a);function U(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1],i=function(){a(!1)};return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"secondary",onClick:function(){a(!0)}},"Open dialog"),o.a.createElement(D.a,{onClose:i,"aria-labelledby":"customized-dialog-title",open:t},o.a.createElement(q,{id:"customized-dialog-title",onClose:i},"Modal title"),o.a.createElement(z,{dividers:!0},o.a.createElement(T.a,{gutterBottom:!0},"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros."),o.a.createElement(T.a,{gutterBottom:!0},"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor."),o.a.createElement(T.a,{gutterBottom:!0},"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.")),o.a.createElement(Y,null,o.a.createElement(u.a,{onClick:i,color:"primary"},"Save changes"))))}var Q="import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const {children, classes, onClose} = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant='h6'>{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label='close'\n          className={classes.closeButton}\n          onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby='customized-dialog-title'\n        open={open}>\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\n          Modal title\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\n            ac consectetur ac, vestibulum at eros.\n          </Typography>\n          <Typography gutterBottom>\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n            auctor.\n          </Typography>\n          <Typography gutterBottom>\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",H=t(1139),J=t(1141),K=t(1125),X=Object(m.a)((function(e){return{appBar:{position:"relative"},title:{marginLeft:e.spacing(2),flex:1}}})),Z=o.a.forwardRef((function(e,n){return o.a.createElement(M.a,Object.assign({direction:"up",ref:n},e))}));function $(){var e=X(),n=o.a.useState(!1),t=Object(s.a)(n,2),a=t[0],i=t[1];function l(){i(!1)}return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){i(!0)}},"Open full-screen dialog"),o.a.createElement(D.a,{fullScreen:!0,open:a,onClose:l,TransitionComponent:Z},o.a.createElement(J.a,{className:e.appBar},o.a.createElement(K.a,null,o.a.createElement(G.a,{edge:"start",color:"inherit",onClick:l,"aria-label":"close"},o.a.createElement(V.a,null)),o.a.createElement(T.a,{variant:"h6",className:e.title},"Sound"),o.a.createElement(u.a,{color:"inherit",onClick:l},"save"))),o.a.createElement(d.a,null,o.a.createElement(g.a,{button:!0},o.a.createElement(h.a,{primary:"Phone ringtone",secondary:"Titania"})),o.a.createElement(H.a,null),o.a.createElement(g.a,{button:!0},o.a.createElement(h.a,{primary:"Default notification ringtone",secondary:"Tethys"})))))}var _=t(1337),ee=t(1258),ne=t(1437),te=t(1120),ae=t(1555),oe=t(1327),ie=Object(m.a)((function(e){return{form:{display:"flex",flexDirection:"column",margin:"auto",width:"fit-content"},formControl:{marginTop:e.spacing(2),minWidth:120},formControlLabel:{marginTop:e.spacing(1)}}}));function le(){var e=ie(),n=o.a.useState(!1),t=Object(s.a)(n,2),a=t[0],i=t[1],l=o.a.useState(!0),r=Object(s.a)(l,2),c=r[0],m=r[1],p=o.a.useState("sm"),d=Object(s.a)(p,2),g=d[0],f=d[1];function h(){i(!1)}return o.a.createElement(o.a.Fragment,null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){i(!0)}},"Open max-width dialog"),o.a.createElement(D.a,{fullWidth:c,maxWidth:g,open:a,onClose:h,"aria-labelledby":"max-width-dialog-title"},o.a.createElement(C.a,{id:"max-width-dialog-title"},"Optional sizes"),o.a.createElement(I.a,null,o.a.createElement(w.a,null,"You can set my maximum width and whether to adapt or not."),o.a.createElement("form",{className:e.form,noValidate:!0},o.a.createElement(_.a,{className:e.formControl},o.a.createElement(ne.a,{htmlFor:"max-width"},"maxWidth"),o.a.createElement(ae.a,{value:g,onChange:function(e){f(e.target.value)},inputProps:{name:"max-width",id:"max-width"}},o.a.createElement(te.a,{value:!1},"false"),o.a.createElement(te.a,{value:"xs"},"xs"),o.a.createElement(te.a,{value:"sm"},"sm"),o.a.createElement(te.a,{value:"md"},"md"),o.a.createElement(te.a,{value:"lg"},"lg"),o.a.createElement(te.a,{value:"xl"},"xl"))),o.a.createElement(ee.a,{className:e.formControlLabel,control:o.a.createElement(oe.a,{checked:c,onChange:function(e){m(e.target.checked)},value:"fullWidth"}),label:"Full width"}))),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:h,color:"primary"},"Close"))))}var re=t(297),ce=t(58);function se(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1],i=Object(ce.a)(),l=Object(re.a)(i.breakpoints.down("sm"));function r(){a(!1)}return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Open responsive dialog"),o.a.createElement(D.a,{fullScreen:l,open:t,onClose:r,"aria-labelledby":"responsive-dialog-title"},o.a.createElement(C.a,{id:"responsive-dialog-title"},"Use Google's location service?"),o.a.createElement(I.a,null,o.a.createElement(w.a,null,"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:r,color:"primary"},"Disagree"),o.a.createElement(u.a,{onClick:r,color:"primary",autoFocus:!0},"Agree"))))}var me="import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {useTheme} from '@material-ui/core/styles';\n\nexport default function ResponsiveDialog() {\n  const [open, setOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary' autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",ue=t(165),pe=t(2342),de=t.n(pe);function ge(e){return o.a.createElement(de.a,{cancel:'[class*="MuiDialogContent-root"]'},o.a.createElement(ue.a,e))}function fe(){var e=o.a.useState(!1),n=Object(s.a)(e,2),t=n[0],a=n[1],i=function(){a(!1)};return o.a.createElement("div",null,o.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){a(!0)}},"Open form dialog"),o.a.createElement(D.a,{open:t,onClose:i,PaperComponent:ge,"aria-labelledby":"draggable-dialog-title"},o.a.createElement(C.a,{style:{cursor:"move"},id:"draggable-dialog-title"},"Subscribe"),o.a.createElement(I.a,null,o.a.createElement(w.a,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally.")),o.a.createElement(A.a,null,o.a.createElement(u.a,{onClick:i,color:"primary"},"Cancel"),o.a.createElement(u.a,{onClick:i,color:"primary"},"Subscribe"))))}n.default=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(r.a,{title:"Dialogs",description:"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.",refUrl:"https://material-ui.com/components/dialogs/"}),o.a.createElement(c.a,null,o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Simple Dialogs",component:O,source:"import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport {blue} from '@material-ui/core/colors';\n\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n});\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const {onClose, selectedValue, open} = props;\n\n  function handleClose() {\n    onClose(selectedValue);\n  }\n\n  function handleListItemClick(value) {\n    onClose(value);\n  }\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby='simple-dialog-title'\n      open={open}>\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n      <List>\n        {emails.map((email) => (\n          <ListItem\n            button\n            onClick={() => handleListItemClick(email)}\n            key={email}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                <PersonIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={email} />\n          </ListItem>\n        ))}\n\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\n          <ListItemAvatar>\n            <Avatar>\n              <AddIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary='add account' />\n        </ListItem>\n      </List>\n    </Dialog>\n  );\n}\n\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};\n\nexport default function SimpleDialogDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <div>\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\n      <br />\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <SimpleDialog\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}\n",description:"Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account)"})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Alerts Dialogs",component:L,source:"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'>\n        <DialogTitle id='alert-dialog-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary' autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",description:"Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Transitions",component:F,source:"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'>\n        <DialogTitle id='alert-dialog-slide-title'>\n          {\"Use Google's location service?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending\n            anonymous location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",description:"You can also swap out the transition, the next example uses Slide."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Form dialogs",component:j,source:"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function FormDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To subscribe to this website, please enter your email address here.\n            We will send updates occasionally.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin='dense'\n            id='name'\n            label='Email Address'\n            type='email'\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",description:"Form dialogs allow users to fill out form fields within a dialog. For example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'. "})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Customized dialogs",component:U,source:Q,description:"Here is an example of customizing the component. You can learn more about this in the overrides documentation page."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Customized dialogs",component:U,source:Q,description:"Here is an example of customizing the component. You can learn more about this in the overrides documentation page."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Full Screen Dialogs",component:$,source:"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open full-screen dialog\n      </Button>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge='start'\n              color='inherit'\n              onClick={handleClose}\n              aria-label='close'>\n              <CloseIcon />\n            </IconButton>\n            <Typography variant='h6' className={classes.title}>\n              Sound\n            </Typography>\n            <Button color='inherit' onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          <ListItem button>\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\n          </ListItem>\n          <Divider />\n          <ListItem button>\n            <ListItemText\n              primary='Default notification ringtone'\n              secondary='Tethys'\n            />\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  );\n}\n"})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Optional sizes",component:le,source:"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: 'auto',\n    width: 'fit-content',\n  },\n  formControl: {\n    marginTop: theme.spacing(2),\n    minWidth: 120,\n  },\n  formControlLabel: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function MaxWidthDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleMaxWidthChange(event) {\n    setMaxWidth(event.target.value);\n  }\n\n  function handleFullWidthChange(event) {\n    setFullWidth(event.target.checked);\n  }\n\n  return (\n    <React.Fragment>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'>\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <form className={classes.form} noValidate>\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width',\n                }}>\n                <MenuItem value={false}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={\n                <Switch\n                  checked={fullWidth}\n                  onChange={handleFullWidthChange}\n                  value='fullWidth'\n                />\n              }\n              label='Full width'\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n",description:"You can set a dialog maximum width by using the maxWidth enumerable in combination with the fullWidth boolean. When the fullWidth property is true, the dialog will adapt based on the maxWidth value."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Responsive full-screen",component:se,source:me,description:"You may make a dialog responsively full screen using useMediaQuery."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Confirmation dialogs",component:se,source:me,description:"Confirmation dialogs require users to explicitly confirm their choice before an option is committed."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Scrolling long content",component:se,source:me,description:"When dialogs become too long for the user\u2019s viewport or device, they scroll.."})),o.a.createElement(i.a,{item:!0,xs:12,lg:6},o.a.createElement(l.a,{title:"Draggable dialog",component:fe,source:"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Paper from '@material-ui/core/Paper';\nimport Draggable from 'react-draggable';\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function DraggableDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        PaperComponent={PaperComponent}\n        aria-labelledby='draggable-dialog-title'>\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\n          Subscribe\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To subscribe to this website, please enter your email address here.\n            We will send updates occasionally.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color='primary'>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",description:"You can create a draggable dialog by using react-draggable. To do so, you can pass the the imported Draggable component as the PaperComponent of the Dialog component. This will make the entire dialog draggable.."}))))}}}]);
//# sourceMappingURL=143.98174cf6.chunk.js.map