{"version":3,"sources":["modules/userPages/StyledUserPages/UnlockScreen.js"],"names":["useStyles","makeStyles","theme","styledImg","display","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","paddingLeft","paddingRight","form","textField","button","height","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","password","required","id","UnlockScreen","classes","animation","delay","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","src","alt","title","mb","fontWeight","Fonts","BOLD","fontSize","component","validateOnChange","initialValues","onSubmit","data","resetForm","isSubmitting","lg","name","label","variant","type","color","disabled"],"mappings":"0PAaMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,UAAW,CACTC,QAAS,gBAEXC,MAAI,GACFC,SAAU,KACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAbd,cAeDb,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAjBd,GAoBJC,KAAM,CACJR,UAAW,QAEbS,UAAW,CACTV,MAAO,QAETW,OAAQ,CACNX,MAAO,OACPY,OAAQ,QAINC,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,SAAUD,MAEPE,SAAS,kBAAC,IAAD,CAAcC,GAAG,mCA8EhBC,UA3EM,WACnB,IAAMC,EAAUnC,IAEhB,OACE,kBAAC,IAAD,CAAYoC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTpC,QAAQ,OACRqC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWV,EAAQ9B,MACvB,kBAAC,IAAD,CAAMyC,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,yBACEL,UAAWV,EAAQhC,UACnBgD,IAAK,2CACLC,IAAI,QACJC,MAAM,WAIV,kBAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKI,GAAI,CAACL,GAAI,EAAGT,GAAI,GAAIe,WAAYC,IAAMC,KAAMC,SAAU,IACzD,kBAAC,IAAD,CAAczB,GAAG,yBAEnB,kBAAC,IAAD,CAAKqB,GAAI,CAACL,GAAI,EAAGT,GAAI,GAAIkB,SAAU,IACjC,kBAAC,IAAD,CAAYC,UAAU,QACpB,kBAAC,IAAD,CAAc1B,GAAG,gCAEnB,kBAAC,IAAD,CAAY0B,UAAU,QACpB,kBAAC,IAAD,CAAc1B,GAAG,iCAGrB,kBAAC,IAAD,CACE2B,kBAAkB,EAClBC,cAAe,CACb9B,SAAU,IAEZF,iBAAkBA,EAClBiC,SAAU,SAACC,EAAD,IACRC,EAD+B,EAAfA,gBAGjB,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMpB,UAAWV,EAAQnB,MACvB,kBAAC,IAAD,CAAKsC,GAAI,CAACL,GAAI,EAAGiB,GAAI,IACnB,kBAAC9C,EAAD,CACE+C,KAAK,WACLC,MAAO,kBAAC,IAAD,CAAcnC,GAAG,oBACxBY,UAAWV,EAAQlB,UACnBoD,QAAQ,WACRC,KAAK,cAGT,kBAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUP,EACVpB,UAAWV,EAAQjB,OACnBoD,KAAK,UACL,kBAAC,IAAD,CAAcrC,GAAG","file":"static/js/189.a814a2c0.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles, Typography} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  styledImg: {\n    display: 'inline-block',\n  },\n  card: {\n    maxWidth: 1024,\n    width: '100%',\n    textAlign: 'center',\n    padding: 32,\n    overflow: 'hidden',\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    [theme.breakpoints.up('sm')]: {\n      padding: 48,\n    },\n    [theme.breakpoints.up('lg')]: {\n      paddingLeft: 32,\n      paddingRight: 64,\n    },\n    [theme.breakpoints.up('xl')]: {\n      paddingLeft: 80,\n      paddingRight: 80,\n    },\n  },\n  form: {\n    textAlign: 'left',\n  },\n  textField: {\n    width: '100%',\n  },\n  button: {\n    width: '100%',\n    height: 44,\n  },\n}));\n\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  password: yup\n    .string()\n    .required(<IntlMessages id='validation.passwordRequired' />),\n});\n\nconst UnlockScreen = () => {\n  const classes = useStyles();\n\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={6}>\n              <img\n                className={classes.styledImg}\n                src={'/assets/images/userPageImages/Unlock.png'}\n                alt='crema'\n                title='crema'\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Box mb={{xs: 6, xl: 8}} fontWeight={Fonts.BOLD} fontSize={20}>\n                <IntlMessages id='common.unlockScreen' />\n              </Box>\n              <Box mb={{xs: 5, xl: 8}} fontSize={14}>\n                <Typography component='span'>\n                  <IntlMessages id='common.unlockScreenTextOne' />\n                </Typography>\n                <Typography component='span'>\n                  <IntlMessages id='common.unlockScreenTextTwo' />\n                </Typography>\n              </Box>\n              <Formik\n                validateOnChange={true}\n                initialValues={{\n                  password: '',\n                }}\n                validationSchema={validationSchema}\n                onSubmit={(data, {resetForm}) => {\n                  resetForm();\n                }}>\n                {({isSubmitting}) => (\n                  <Form className={classes.form}>\n                    <Box mb={{xs: 5, lg: 8}}>\n                      <MyTextField\n                        name='password'\n                        label={<IntlMessages id='common.password' />}\n                        className={classes.textField}\n                        variant='outlined'\n                        type='password'\n                      />\n                    </Box>\n                    <Button\n                      variant='contained'\n                      color='primary'\n                      disabled={isSubmitting}\n                      className={classes.button}\n                      type='submit'>\n                      <IntlMessages id='common.unlockItForMe' />\n                    </Button>\n                  </Form>\n                )}\n              </Formik>\n            </Grid>\n          </Grid>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default UnlockScreen;\n"],"sourceRoot":""}