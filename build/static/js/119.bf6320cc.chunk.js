(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[119],{1500:function(e,n,t){var o=t(144),a=t(124);e.exports=function(e){return"number"==typeof e||a(e)&&"[object Number]"==o(e)}},2688:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SearchBox=void 0;var o=x(t(1254)),a=x(t(1244)),r=x(t(1245)),s=x(t(1246)),i=x(t(1247)),l=x(t(1248)),c=x(t(1500)),p=x(t(1289)),d=x(t(1587)),u=x(t(0)),m=x(t(34)),h=x(t(11)),g=t(1264),f=t(1255);function x(e){return e&&e.__esModule?e:{default:e}}var b=n.SearchBox=function(e){function n(){var e,t,s,l;(0,r.default)(this,n);for(var c=arguments.length,p=Array(c),d=0;d<c;d++)p[d]=arguments[d];return t=s=(0,i.default)(this,(e=n.__proto__||(0,a.default)(n)).call.apply(e,[this].concat(p))),s.state=(0,o.default)({},f.SEARCH_BOX,null),l=t,(0,i.default)(s,l)}return(0,l.default)(n,e),(0,s.default)(n,[{key:"componentWillMount",value:function(){d.default&&!this.containerElement&&((0,p.default)(google.maps.places,'Did you include "libraries=places" in the URL?'),this.containerElement=document.createElement("div"),this.handleRenderChildToContainerElement(),u.default.version.match(/^16/)||this.handleInitializeSearchBox())}},{key:"componentDidMount",value:function(){var e=this.state[f.SEARCH_BOX];u.default.version.match(/^16/)&&(e=this.handleInitializeSearchBox()),(0,g.componentDidMount)(this,e,y),this.handleMountAtControlPosition()}},{key:"componentWillUpdate",value:function(e){this.props.controlPosition!==e.controlPosition&&this.handleUnmountAtControlPosition()}},{key:"componentDidUpdate",value:function(e){(0,g.componentDidUpdate)(this,this.state[f.SEARCH_BOX],y,C,e),this.props.children!==e.children&&this.handleRenderChildToContainerElement(),this.props.controlPosition!==e.controlPosition&&this.handleMountAtControlPosition()}},{key:"componentWillUnmount",value:function(){(0,g.componentWillUnmount)(this),this.handleUnmountAtControlPosition(),u.default.version.match(/^16/)||this.containerElement&&(m.default.unmountComponentAtNode(this.containerElement),this.containerElement=null)}},{key:"handleInitializeSearchBox",value:function(){var e=new google.maps.places.SearchBox(this.containerElement.querySelector("input"));return(0,g.construct)(n.propTypes,C,this.props,e),this.setState((0,o.default)({},f.SEARCH_BOX,e)),e}},{key:"handleRenderChildToContainerElement",value:function(){u.default.version.match(/^16/)||m.default.unstable_renderSubtreeIntoContainer(this,u.default.Children.only(this.props.children),this.containerElement)}},{key:"handleMountAtControlPosition",value:function(){v(this.props.controlPosition)&&(this.mountControlIndex=-1+this.context[f.MAP].controls[this.props.controlPosition].push(this.containerElement.firstChild))}},{key:"handleUnmountAtControlPosition",value:function(){if(v(this.props.controlPosition)){var e=this.context[f.MAP].controls[this.props.controlPosition].removeAt(this.mountControlIndex);void 0!==e&&this.containerElement.appendChild(e)}}},{key:"render",value:function(){return!!u.default.version.match(/^16/)&&m.default.createPortal(u.default.Children.only(this.props.children),this.containerElement)}},{key:"getBounds",value:function(){return this.state[f.SEARCH_BOX].getBounds()}},{key:"getPlaces",value:function(){return this.state[f.SEARCH_BOX].getPlaces()}}]),n}(u.default.PureComponent);b.propTypes={controlPosition:h.default.number,defaultBounds:h.default.any,bounds:h.default.any,onPlacesChanged:h.default.func},b.contextTypes=(0,o.default)({},f.MAP,h.default.object),n.default=b;var v=c.default,y={onPlacesChanged:"places_changed"},C={bounds:function(e,n){e.setBounds(n)}}},3153:function(e,n,t){"use strict";t.r(n);var o=t(0),a=t.n(o),r=t(1081),s=t(306),i=t(305),l=t(304),c=t(313),p=t(314),d=t(316),u=t(315),m=window.google,h=t(66),g=t(1833),f=g.compose,x=g.withProps,b=g.lifecycle,v=t(1306),y=v.withScriptjs,C=v.withGoogleMap,S=v.GoogleMap,M=v.Marker,B=t(2688).SearchBox,E=f(x({googleMapURL:"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k",loadingElement:a.a.createElement("div",{className:"cr-embed-responsive-item"}),containerElement:a.a.createElement("div",{className:"cr-embed-responsive cr-embed-responsive-21by9"}),mapElement:a.a.createElement("div",{className:"cr-embed-responsive-item"})}),b({componentWillMount:function(){var e=this,n={};this.setState({bounds:null,center:{lat:41.9,lng:-87.624},markers:[],onMapMounted:function(e){n.map=e},onBoundsChanged:function(){e.setState({bounds:n.map.getBounds(),center:n.map.getCenter()})},onSearchBoxMounted:function(e){n.searchBox=e},onPlacesChanged:function(){var t=n.searchBox.getPlaces(),o=new m.maps.LatLngBounds;t.forEach((function(e){e.geometry&&e.geometry.viewport?o.union(e.geometry.viewport):o.extend(e.geometry.location)}));var a=t.map((function(e){return{position:e.geometry.location}})),r=h.get(a,"0.position",e.state.center);e.setState({center:r,markers:a})}})}}),y,C)((function(e){return a.a.createElement(S,{ref:e.onMapMounted,defaultZoom:15,center:e.center,defaultOptions:{mapTypeControl:!1},onBoundsChanged:e.onBoundsChanged},a.a.createElement(B,{ref:e.onSearchBoxMounted,bounds:e.bounds,controlPosition:m.maps.ControlPosition.TOP_LEFT,onPlacesChanged:e.onPlacesChanged},a.a.createElement("input",{type:"text",placeholder:"Enter search location",style:{boxSizing:"border-box",border:"1px solid transparent",width:"240px",height:"32px",marginTop:"27px",padding:"0 12px",borderRadius:"3px",boxShadow:"0 2px 6px rgba(0, 0, 0, 0.3)",fontSize:"14px",outline:"none",marginLeft:"20px",textOverflow:"ellipses"}})),e.markers.map((function(e,n){return a.a.createElement(M,{key:n,position:e.position})})))})),P=function(e){Object(d.a)(t,e);var n=Object(u.a)(t);function t(){return Object(c.a)(this,t),n.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return a.a.createElement(E,{containerElement:a.a.createElement("div",{className:"cr-embed-responsive cr-embed-responsive-21by9"}),mapElement:a.a.createElement("div",{className:"cr-embed-responsive-item"})})}}]),t}(o.Component);n.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(i.a,{title:"Google Map with SearchBox",description:"A wrapper around google.maps.places.SearchBox on the map",refUrl:"https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox/"}),a.a.createElement(l.a,null,a.a.createElement(r.a,{item:!0,xs:12},a.a.createElement(s.a,{title:"Map With Search Box",component:P,source:"import React, {Component} from 'react';\n\nconst google = window.google;\n\nconst _ = require('lodash');\nconst {compose, withProps, lifecycle} = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} = require('react-google-maps');\nconst {\n  SearchBox,\n} = require('react-google-maps/lib/components/places/SearchBox');\n\nconst MapWithASearchBoxs = compose(\n  withProps({\n    googleMapURL:\n      'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k',\n    loadingElement: <div className='cr-embed-responsive-item' />,\n    containerElement: (\n      <div className='cr-embed-responsive cr-embed-responsive-21by9' />\n    ),\n    mapElement: <div className='cr-embed-responsive-item' />,\n  }),\n  lifecycle({\n    componentWillMount() {\n      const refs = {};\n\n      this.setState({\n        bounds: null,\n        center: {\n          lat: 41.9,\n          lng: -87.624,\n        },\n        markers: [],\n        onMapMounted: (ref) => {\n          refs.map = ref;\n        },\n        onBoundsChanged: () => {\n          this.setState({\n            bounds: refs.map.getBounds(),\n            center: refs.map.getCenter(),\n          });\n        },\n        onSearchBoxMounted: (ref) => {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: () => {\n          const places = refs.searchBox.getPlaces();\n          const bounds = new google.maps.LatLngBounds();\n\n          places.forEach((place) => {\n            if (place.geometry && place.geometry.viewport) {\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          const nextMarkers = places.map((place) => ({\n            position: place.geometry.location,\n          }));\n          const nextCenter = _.get(\n            nextMarkers,\n            '0.position',\n            this.state.center,\n          );\n\n          this.setState({\n            center: nextCenter,\n            markers: nextMarkers,\n          });\n          // refs.map.fitBounds(bounds);\n        },\n      });\n    },\n  }),\n  withScriptjs,\n  withGoogleMap,\n)((props) => (\n  <GoogleMap\n    ref={props.onMapMounted}\n    defaultZoom={15}\n    center={props.center}\n    defaultOptions={{mapTypeControl: false}}\n    onBoundsChanged={props.onBoundsChanged}>\n    <SearchBox\n      ref={props.onSearchBoxMounted}\n      bounds={props.bounds}\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\n      onPlacesChanged={props.onPlacesChanged}>\n      <input\n        type='text'\n        placeholder='Enter search location'\n        style={{\n          boxSizing: `border-box`,\n          border: `1px solid transparent`,\n          width: `240px`,\n          height: `32px`,\n          marginTop: `27px`,\n          padding: `0 12px`,\n          borderRadius: `3px`,\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n          fontSize: `14px`,\n          outline: `none`,\n          marginLeft: '20px',\n          textOverflow: `ellipses`,\n        }}\n      />\n    </SearchBox>\n    {props.markers.map((marker, index) => (\n      <Marker key={index} position={marker.position} />\n    ))}\n  </GoogleMap>\n));\n\nexport default class MapWithASearchBox extends Component {\n  render() {\n    return (\n      <MapWithASearchBoxs\n        containerElement={\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\n        }\n        mapElement={<div className='cr-embed-responsive-item' />}\n      />\n    );\n  }\n}\n// const _ = require(\"lodash\");\n// const { compose, withProps, lifecycle } = require(\"recompose\");\n// const {\n//   withScriptjs,\n//   withGoogleMap,\n//   GoogleMap,\n//   Marker,\n// } = require(\"react-google-maps\");\n// const { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\n//\n// const MapWithASearchBox = compose(\n//   withProps({\n//     googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\n//     loadingElement: <div style={{ height: `100%` }} />,\n//     containerElement: <div style={{ height: `400px` }} />,\n//     mapElement: <div style={{ height: `100%` }} />,\n//   }),\n//   lifecycle({\n//     componentWillMount() {\n//       const refs = {}\n//\n//       this.setState({\n//         bounds: null,\n//         center: {\n//           lat: 41.9, lng: -87.624\n//         },\n//         markers: [],\n//         onMapMounted: ref => {\n//           refs.map = ref;\n//         },\n//         onBoundsChanged: () => {\n//           this.setState({\n//             bounds: refs.map.getBounds(),\n//             center: refs.map.getCenter(),\n//           })\n//         },\n//         onSearchBoxMounted: ref => {\n//           refs.searchBox = ref;\n//         },\n//         onPlacesChanged: () => {\n//           const places = refs.searchBox.getPlaces();\n//           const bounds = new google.maps.LatLngBounds();\n//\n//           places.forEach(place => {\n//             if (place.geometry.viewport) {\n//               bounds.union(place.geometry.viewport)\n//             } else {\n//               bounds.extend(place.geometry.location)\n//             }\n//           });\n//           const nextMarkers = places.map(place => ({\n//             position: place.geometry.location,\n//           }));\n//           const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n//\n//           this.setState({\n//             center: nextCenter,\n//             markers: nextMarkers,\n//           });\n//           // refs.map.fitBounds(bounds);\n//         },\n//       })\n//     },\n//   }),\n//   withScriptjs,\n//   withGoogleMap\n// )(props =>\n//   <GoogleMap\n//     ref={props.onMapMounted}\n//     defaultZoom={15}\n//     center={props.center}\n//     onBoundsChanged={props.onBoundsChanged}\n//   >\n//     <SearchBox\n//       ref={props.onSearchBoxMounted}\n//       bounds={props.bounds}\n//       controlPosition={google.maps.ControlPosition.TOP_LEFT}\n//       onPlacesChanged={props.onPlacesChanged}\n//     >\n//       <input\n//         type=\"text\"\n//         Skeleton=\"Customized your Skeleton\"\n//         style={{\n//           boxSizing: `border-box`,\n//           border: `1px solid transparent`,\n//           width: `240px`,\n//           height: `32px`,\n//           marginTop: `27px`,\n//           padding: `0 12px`,\n//           borderRadius: `3px`,\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n//           fontSize: `14px`,\n//           outline: `none`,\n//           textOverflow: `ellipses`,\n//         }}\n//       />\n//     </SearchBox>\n//     {props.markers.map((marker, index) =>\n//       <Marker key={index} position={marker.position} />\n//     )}\n//   </GoogleMap>\n// );\n"}))))}}}]);
//# sourceMappingURL=119.bf6320cc.chunk.js.map