(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[170],{3101:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(313),i=t(314),s=t(323),l=t(316),d=t(315),p=t(22),c=t(1323),m=[{id:"1000",name:"Aysha Julka",handle:"ayshajulkaji",image:"https://via.placeholder.com/150"},{id:"1001",name:"Ayra Rovishi",handle:"ayrarovishi",image:"https://via.placeholder.com/150"},{id:"1002",name:"Sapna Awasthi",handle:"sapnaawasthi",image:"https://via.placeholder.com/150"},{id:"1003",name:"Sami Rudri",handle:"samirudri",image:"https://via.placeholder.com/150"},{id:"1004",name:"Brian Lara",handle:"brianlara",image:"https://via.placeholder.com/150"},{id:"1005",name:"Rickey Ponting",handle:"rickeyponting",image:"https://via.placeholder.com/150"},{id:"1007",name:"Smriti Mandhana",handle:"smritimandhana",image:"https://via.placeholder.com/150"},{id:"1008",name:"Aysha Julka",handle:"benstokes",image:"https://via.placeholder.com/150"}],u=t(458),g=t(459),h=t(1118),f=t(297),x=t(67),b=t(7),y=t(1874),v=function(e){Object(l.a)(t,e);var n=Object(d.a)(t);function t(e,a){var r;return Object(o.a)(this,t),(r=n.call(this,e,a)).state={items:m},r.onDragEnd=r.onDragEnd.bind(Object(s.a)(r)),r}return Object(i.a)(t,[{key:"onDragEnd",value:function(e){if(e.destination){var n=function(e,n,t){var a=Array.from(e),r=a.splice(n,1),o=Object(p.a)(r,1)[0];return a.splice(t,0,o),a}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:"render",value:function(){var e=this,n=this.props.classes;return r.a.createElement(c.DragDropContext,{onDragEnd:this.onDragEnd},r.a.createElement(c.Droppable,{droppableId:"droppable"},(function(t,a){return r.a.createElement(x.a,{display:"flex",flexDirection:"column",alignItems:"center"},r.a.createElement(x.a,{ref:t.innerRef,style:(a.isDraggingOver,o=e.props.overflow,{border:"5px solid pink",padding:8,maxHeight:"50vh",overflow:o,width:300,"@media (min-width: 600px)":{width:300}}),onScroll:function(e){}},e.state.items.map((function(e,t){return r.a.createElement(c.Draggable,{key:e.id,draggableId:e.handle,index:t},(function(t,a){return r.a.createElement(x.a,Object.assign({ref:t.innerRef},t.draggableProps,t.dragHandleProps),r.a.createElement(x.a,{px:2,mb:5,clone:!0},r.a.createElement(f.a,{className:n.rootList},r.a.createElement(x.a,{mr:3,mt:0,display:"flex",justifyContent:"center",clone:!0},r.a.createElement(u.a,null,r.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),r.a.createElement(x.a,{my:0,clone:!0},r.a.createElement(h.a,{primary:r.a.createElement(x.a,{component:"span",fontWeight:b.b.MEDIUM},e.name),secondary:r.a.createElement(x.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))))}))})),t.placeholder));var o})))}}]),t}(a.Component);v.defaultProps={overflow:"auto"};var E=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(v),D=function(e){Object(l.a)(t,e);var n=Object(d.a)(t);function t(e){var a;return Object(o.a)(this,t),(a=n.call(this,e)).state={items:m.slice(0,6)},a.onDragEnd=a.onDragEnd.bind(Object(s.a)(a)),a}return Object(i.a)(t,[{key:"onDragEnd",value:function(e){if(e.destination){var n=function(e,n,t){var a=Array.from(e),r=a.splice(n,1),o=Object(p.a)(r,1)[0];return a.splice(t,0,o),a}(this.state.items,e.source.index,e.destination.index);this.setState({items:n})}}},{key:"render",value:function(){var e=this,n=this.props.classes;return r.a.createElement(c.DragDropContext,{onDragEnd:this.onDragEnd},r.a.createElement(c.Droppable,{droppableId:"droppable",direction:"horizontal"},(function(t,a){return r.a.createElement("div",Object.assign({ref:t.innerRef,style:(a.isDraggingOver,{border:"5px solid #E0E0E0",display:"flex",padding:8,overflow:"auto"})},t.droppableProps),e.state.items.map((function(e,t){return r.a.createElement(c.Draggable,{key:e.id,draggableId:e.handle,index:t},(function(t,a){return r.a.createElement(x.a,Object.assign({mr:3,ref:t.innerRef},t.draggableProps,t.dragHandleProps),r.a.createElement(x.a,{p:2,width:"16rem",mr:2,clone:!0},r.a.createElement(f.a,{className:n.rootList},r.a.createElement(x.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},r.a.createElement(u.a,null,r.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),r.a.createElement(x.a,{my:0,clone:!0},r.a.createElement(h.a,{primary:r.a.createElement(x.a,{component:"span",fontWeight:b.b.MEDIUM},e.name),secondary:r.a.createElement(x.a,{component:"span",display:"block",color:"text.secondary"},"@",e.handle)})))))}))})),t.placeholder)})))}}]),t}(a.Component),I=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(D),L=t(9),w=t(198),B=function(e,n,t){var a=Array.from(e),r=a.splice(n,1),o=Object(p.a)(r,1)[0];return a.splice(t,0,o),a},k=function(e,n,t,a){var r=Array.from(e),o=Array.from(n),i=r.splice(t.compose,1),s=Object(p.a)(i,1)[0];o.splice(a.compose,0,s);var l={};return l[t.droppableId]=r,l[a.droppableId]=o,l},S=function(e){return{background:e?"lightblue":"lightgrey",border:"5px solid #E0E0E0",padding:8,marginRight:10,marginBottom:20,width:300,"@media (min-width: 600px)":{width:300}}},O=function(e){Object(l.a)(t,e);var n=Object(d.a)(t);function t(){var e;Object(o.a)(this,t);for(var a=arguments.length,r=new Array(a),i=0;i<a;i++)r[i]=arguments[i];return(e=n.call.apply(n,[this].concat(r))).state={items:m.slice(0,10),selected:m.slice(5,10)},e.id2List={droppable:"items",droppable2:"selected"},e.getList=function(n){return e.state[e.id2List[n]]},e.onDragEnd=function(n){var t=n.source,a=n.destination;if(a)if(t.droppableId===a.droppableId){var r=B(e.getList(t.droppableId),t.index,a.index),o={items:r};"droppable2"===t.droppableId&&(o={selected:r}),e.setState(o)}else{var i=k(e.getList(t.droppableId),e.getList(a.droppableId),t,a);e.setState({items:i.droppable,selected:i.droppable2})}},e}return Object(i.a)(t,[{key:"render",value:function(){var e=this,n=this.props.classes;return r.a.createElement(c.DragDropContext,{onDragEnd:this.onDragEnd},r.a.createElement(x.a,{display:"flex",flexDirection:{xs:"column",sm:"row"},justifyContent:{sm:"center"},alignItems:"center"},r.a.createElement(c.Droppable,{droppableId:"droppable"},(function(t,a){return r.a.createElement(x.a,{ref:t.innerRef,style:S(a.isDraggingOver)},e.state.items.map((function(e,t){return r.a.createElement(c.Draggable,{key:e.id,draggableId:e.handle,index:t},(function(t,a){return r.a.createElement(x.a,Object.assign({ref:t.innerRef},t.draggableProps,t.dragHandleProps),r.a.createElement(x.a,{px:2,bgcolor:w.a[300],mb:5,clone:!0},r.a.createElement(f.a,{className:n.rootList},r.a.createElement(x.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},r.a.createElement(u.a,null,r.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),r.a.createElement(x.a,{my:0,clone:!0},r.a.createElement(h.a,{primary:r.a.createElement(x.a,{component:"span",fontWeight:b.b.MEDIUM},e.name),secondary:r.a.createElement(x.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))))}))})),t.placeholder)})),r.a.createElement(c.Droppable,{droppableId:"droppable2"},(function(t,a){return r.a.createElement(x.a,{ref:t.innerRef,style:S(a.isDraggingOver)},e.state.selected.map((function(e,t){return r.a.createElement(c.Draggable,{key:e.id,draggableId:e.id,index:t},(function(t,a){return r.a.createElement(x.a,Object.assign({ref:t.innerRef},t.draggableProps,t.dragHandleProps,{style:(o=a.isDragging,i=t.draggableProps.style,Object(L.a)({userSelect:"none",padding:8,margin:"0 0 20px 0",background:o?"lightgreen":"#E0E0E0"},i))}),r.a.createElement(x.a,{p:0,clone:!0},r.a.createElement(f.a,{className:n.rootList},r.a.createElement(x.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},r.a.createElement(u.a,null,r.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),r.a.createElement(x.a,{my:0,clone:!0},r.a.createElement(h.a,{primary:r.a.createElement(x.a,{component:"span",fontWeight:b.b.LIGHT},e.name),secondary:r.a.createElement(x.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))));var o,i}))})),t.placeholder)}))))}}]),t}(a.Component),j=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(O),C=t(2580),A=t(2),R=t(3021),P=t(164);function H(){var e=Object(C.a)(["\n  width: 170px;\n  margin-bottom: 20px;\n  background-color: #e0e0e0;\n  padding: ","px;\n  @media (min-width: 600px) {\n    width: 300px;\n  }\n"]);return H=function(){return e},e}var q=Object(P.a)((function(e){return{root:Object(A.a)({},e.breakpoints.down("xs"),{width:"100%","& .css-1gwkzgr":{width:"100%"}}),rootList:{backgroundColor:e.palette.background.paper}}})),T=R.a.div(H(),8);function M(e){var n=e.quote,t=e.index,a=q();return r.a.createElement(c.Draggable,{draggableId:n.handle,index:t},(function(e){return r.a.createElement(T,Object.assign({ref:e.innerRef},e.draggableProps,e.dragHandleProps),r.a.createElement(x.a,{p:0,clone:!0},r.a.createElement(f.a,{className:a.rootList},r.a.createElement(x.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},r.a.createElement(u.a,null,r.a.createElement(g.a,{alt:"Remy Sharp",src:n.image}))),r.a.createElement(x.a,{my:0,clone:!0},r.a.createElement(h.a,{primary:r.a.createElement(x.a,{component:"span",fontWeight:b.b.MEDIUM},n.name),secondary:r.a.createElement(x.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",n.handle)})))))}))}var N=r.a.memo((function(e){return e.quotes.map((function(e,n){return r.a.createElement(M,{quote:e,index:n,key:e.id})}))})),W=function(){var e=Object(a.useState)({quotes:m}),n=Object(p.a)(e,2),t=n[0],o=n[1],i=q();return r.a.createElement(c.DragDropContext,{onDragEnd:function(e){if(e.destination&&e.destination.compose!==e.source.compose){var n=function(e,n,t){var a=Array.from(e),r=a.splice(n,1),o=Object(p.a)(r,1)[0];return a.splice(t,0,o),a}(t.quotes,e.source.index,e.destination.index);o({quotes:n})}}},r.a.createElement(x.a,{width:1,display:"flex",flexDirection:"column",alignItems:"center"},r.a.createElement(x.a,{className:i.root,border:"solid 4px ".concat(w.a[300]),p:2,mb:3},r.a.createElement(c.Droppable,{droppableId:"list"},(function(e){return r.a.createElement(x.a,Object.assign({ref:e.innerRef},e.droppableProps),r.a.createElement(N,{quotes:t.quotes}),e.placeholder)})))))},F=t(1077),z=t(1078),U=t(1079),Q=t(420),J=t.n(Q),G=t(290),$=t(479),K=t(1080),V=t(33),X=t(4),Y=t(419),Z=Object(P.a)((function(e){return{root:{borderRadius:8,padding:16,backgroundColor:e.palette.background.default},cardHeader:{paddingLeft:32,paddingRight:32,"& .MuiTypography-h5":{fontSize:16,fontWeight:b.b.BOLD,marginBottom:1}},cardContent:{paddingLeft:32,paddingRight:32,paddingTop:0},preTag:{borderRadius:8,padding:12}}})),_=function(e){var n=e.title,t=e.maxHeight,o=e.description,i=e.component,s=e.source,l=Object(a.useState)(!1),d=Object(p.a)(l,2),c=d[0],m=d[1],u=Object(a.useState)(!1),g=Object(p.a)(u,2),h=g[0],f=g[1],b=Z();return r.a.createElement(F.a,null,r.a.createElement(z.a,{className:b.cardHeader,title:n,subheader:o,root:{subheader:{fontSize:14}},action:s?r.a.createElement(x.a,{mt:2},r.a.createElement($.a,{"aria-label":"view code",onClick:function(){h?(f(!h),setTimeout((function(){return m(!c)}),400)):(f(!h),m(!c))}},r.a.createElement(J.a,null))):null}),r.a.createElement(U.a,{className:b.cardContent},r.a.createElement(K.a,{in:h},c?r.a.createElement(V.a,{style:{borderRadius:8,background:"#333333"}},r.a.createElement(G.a,Object.assign({},G.b,{code:s,language:"jsx",theme:Y.a}),(function(e){var n=e.className,t=e.style,a=e.tokens,o=e.getLineProps,i=e.getTokenProps;return r.a.createElement("pre",{className:Object(X.default)(n,b.preTag),style:Object(L.a)(Object(L.a)({},t),{},{maxHeight:500})},a.map((function(e,n){return r.a.createElement(x.a,o({line:e,key:n}),e.map((function(e,n){return r.a.createElement("span",i({token:e,key:n}))})))})))}))):null),r.a.createElement(V.a,{className:b.root,style:{maxHeight:t}},r.a.createElement(x.a,{width:"100%",display:"flex",alignItems:"center",justifyContent:"center"},r.a.createElement(i,null)))))},ee=_;_.defaultProps={description:"",maxHeight:500};var ne=t(305),te=t(304),ae=t(1081);n.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(ne.a,{title:"React Beautiful Dnd",description:"Beautiful and accessible drag and drop for lists with React",refUrl:"https://react-beautiful-dnd.netlify.com/?path=/story/single-vertical-list--basic"}),r.a.createElement(te.a,null,r.a.createElement(ae.a,{item:!0,xs:12,xl:6},r.a.createElement(ee,{title:"Simple",component:E,source:"import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport Box from '@material-ui/core/Box';\nimport {Fonts} from '../../../../shared/constants/AppEnums';\nimport withStyles from '@material-ui/core/es/styles/withStyles';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst styles = (theme) => {\n  return {\n    rootList: {\n      backgroundColor: theme.palette.background.paper,\n    },\n  };\n};\n\nconst getListStyle = (isDraggingOver, overflow) => ({\n  // background: isDraggingOver ? 'lightblue' : 'grey',\n  border: '5px solid pink',\n  padding: grid,\n  maxHeight: '50vh',\n  overflow,\n  width: 300,\n  '@media (min-width: 600px)': {\n    width: 300,\n  },\n});\n\nclass Simple extends Component {\n  static propTypes = {\n    overflow: PropTypes.string,\n  };\n  static defaultProps = {\n    overflow: 'auto',\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      items: simpleListData,\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index,\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate core.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const {classes} = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId='droppable'>\n          {(droppableProvided, droppableSnapshot) => (\n            <Box display='flex' flexDirection='column' alignItems='center'>\n              <Box\n                ref={droppableProvided.innerRef}\n                style={getListStyle(\n                  droppableSnapshot.isDraggingOver,\n                  this.props.overflow,\n                )}\n                onScroll={\n                  (e) => {}\n                  // eslint-disable-next-line no-console\n                }>\n                {this.state.items.map((item, index) => (\n                  <Draggable\n                    key={item.id}\n                    draggableId={item.handle}\n                    index={index}>\n                    {(draggableProvided, draggableSnapshot) => (\n                      <Box\n                        ref={draggableProvided.innerRef}\n                        {...draggableProvided.draggableProps}\n                        {...draggableProvided.dragHandleProps}>\n                        <Box px={2} mb={5} clone>\n                          <ListItem className={classes.rootList}>\n                            <Box\n                              mr={3}\n                              mt={0}\n                              display='flex'\n                              justifyContent='center'\n                              clone>\n                              <ListItemAvatar>\n                                <Avatar alt='Remy Sharp' src={item.image} />\n                              </ListItemAvatar>\n                            </Box>\n                            <Box my={0} clone>\n                              <ListItemText\n                                primary={\n                                  <Box\n                                    component='span'\n                                    fontWeight={Fonts.MEDIUM}>\n                                    {item.name}\n                                  </Box>\n                                }\n                                secondary={\n                                  <Box\n                                    component='span'\n                                    display='block'\n                                    color='text.secondary'\n                                    overflow='hidden'\n                                    textOverflow='ellipsis'\n                                    whiteSpace='nowrap'>\n                                    @{item.handle}\n                                  </Box>\n                                }\n                              />\n                            </Box>\n                          </ListItem>\n                        </Box>\n                      </Box>\n                    )}\n                  </Draggable>\n                ))}\n                {droppableProvided.placeholder}\n              </Box>\n            </Box>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default withStyles(styles)(Simple);\n"})),r.a.createElement(ae.a,{item:!0,xs:12,xl:6},r.a.createElement(ee,{title:"WithHooks",component:W,source:"import React, {useState} from 'react';\nimport styled from '@emotion/styled';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport Box from '@material-ui/core/Box';\nimport {grey} from '@material-ui/core/colors';\nimport {Fonts} from '../../../../shared/constants/AppEnums';\nimport {makeStyles} from '@material-ui/core';\n\nconst grid = 8;\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: {\n      [theme.breakpoints.down('xs')]: {\n        width: '100%',\n        '& .css-1gwkzgr': {\n          width: '100%',\n        },\n      },\n    },\n    rootList: {\n      backgroundColor: theme.palette.background.paper,\n    },\n  };\n});\n\nconst QuoteItem = styled.div`\n  width: 170px;\n  margin-bottom: 20px;\n  background-color: #e0e0e0;\n  padding: ${grid}px;\n  @media (min-width: 600px) {\n    width: 300px;\n  }\n`;\n\nfunction Quote({quote, index}) {\n  const classes = useStyles();\n  return (\n    <Draggable draggableId={quote.handle} index={index}>\n      {(provided) => (\n        <QuoteItem\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}>\n          <Box p={0} clone>\n            <ListItem className={classes.rootList}>\n              <Box\n                mr={3}\n                mt={0}\n                ml={1.5}\n                display='flex'\n                justifyContent='center'\n                clone>\n                <ListItemAvatar>\n                  <Avatar alt='Remy Sharp' src={quote.image} />\n                </ListItemAvatar>\n              </Box>\n\n              <Box my={0} clone>\n                <ListItemText\n                  primary={\n                    <Box component='span' fontWeight={Fonts.MEDIUM}>\n                      {quote.name}\n                    </Box>\n                  }\n                  secondary={\n                    <Box\n                      component='span'\n                      display='block'\n                      color='text.secondary'\n                      overflow='hidden'\n                      textOverflow='ellipsis'\n                      whiteSpace='nowrap'>\n                      @{quote.handle}\n                    </Box>\n                  }\n                />\n              </Box>\n            </ListItem>\n          </Box>\n        </QuoteItem>\n      )}\n    </Draggable>\n  );\n}\n\nconst QuoteList = React.memo(function QuoteList({quotes}) {\n  return quotes.map((quote, index) => (\n    <Quote quote={quote} index={index} key={quote.id} />\n  ));\n});\n\nconst WithHooks = () => {\n  const [state, setState] = useState({quotes: simpleListData});\n  const classes = useStyles();\n\n  function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.compose === result.source.compose) {\n      return;\n    }\n\n    const quotes = reorder(\n      state.quotes,\n      result.source.index,\n      result.destination.index,\n    );\n\n    setState({quotes});\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Box width={1} display='flex' flexDirection='column' alignItems='center'>\n        <Box\n          className={classes.root}\n          border={`solid 4px ${grey[300]}`}\n          p={2}\n          mb={3}>\n          <Droppable droppableId='list'>\n            {(provided) => (\n              <Box ref={provided.innerRef} {...provided.droppableProps}>\n                <QuoteList quotes={state.quotes} />\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </Box>\n      </Box>\n    </DragDropContext>\n  );\n};\nexport default WithHooks;\n"})),r.a.createElement(ae.a,{item:!0,xs:12},r.a.createElement(ee,{title:"MultipleDrop",component:j,source:"import React, {Component} from 'react';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport Box from '@material-ui/core/Box';\nimport {grey} from '@material-ui/core/colors';\nimport {Fonts} from '../../../../shared/constants/AppEnums';\nimport withStyles from '@material-ui/core/es/styles/withStyles';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.compose, 1);\n\n  destClone.splice(droppableDestination.compose, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst styles = (theme) => {\n  return {\n    rootList: {\n      backgroundColor: theme.palette.background.paper,\n    },\n  };\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid,\n  margin: `0 0 20px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : '#E0E0E0',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  border: '5px solid #E0E0E0',\n  padding: grid,\n  marginRight: 10,\n  marginBottom: 20,\n  width: 300,\n  '@media (min-width: 600px)': {\n    width: 300,\n  },\n});\n\nclass MultipleDrop extends Component {\n  state = {\n    items: simpleListData.slice(0, 10),\n    selected: simpleListData.slice(5, 10),\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    droppable: 'items',\n    droppable2: 'selected',\n  };\n\n  getList = (id) => this.state[this.id2List[id]];\n\n  onDragEnd = (result) => {\n    const {source, destination} = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index,\n      );\n\n      let state = {items};\n\n      if (source.droppableId === 'droppable2') {\n        state = {selected: items};\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination,\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2,\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate core.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const {classes} = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Box\n          display='flex'\n          flexDirection={{xs: 'column', sm: 'row'}}\n          justifyContent={{sm: 'center'}}\n          alignItems='center'>\n          <Droppable droppableId='droppable'>\n            {(provided, snapshot) => (\n              <Box\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}>\n                {this.state.items.map((item, index) => (\n                  <Draggable\n                    key={item.id}\n                    draggableId={item.handle}\n                    index={index}>\n                    {(provided, snapshot) => (\n                      <Box\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}>\n                        <Box px={2} bgcolor={grey[300]} mb={5} clone>\n                          <ListItem className={classes.rootList}>\n                            <Box\n                              mr={3}\n                              mt={0}\n                              ml={1.5}\n                              display='flex'\n                              justifyContent='center'\n                              clone>\n                              <ListItemAvatar>\n                                <Avatar alt='Remy Sharp' src={item.image} />\n                              </ListItemAvatar>\n                            </Box>\n                            <Box my={0} clone>\n                              <ListItemText\n                                primary={\n                                  <Box\n                                    component='span'\n                                    fontWeight={Fonts.MEDIUM}>\n                                    {item.name}\n                                  </Box>\n                                }\n                                secondary={\n                                  <Box\n                                    component='span'\n                                    display='block'\n                                    color='text.secondary'\n                                    overflow='hidden'\n                                    textOverflow='ellipsis'\n                                    whiteSpace='nowrap'>\n                                    @{item.handle}\n                                  </Box>\n                                }\n                              />\n                            </Box>\n                          </ListItem>\n                        </Box>\n                      </Box>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n          <Droppable droppableId='droppable2'>\n            {(provided, snapshot) => (\n              <Box\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}>\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <Box\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style,\n                        )}>\n                        <Box p={0} clone>\n                          <ListItem className={classes.rootList}>\n                            <Box\n                              mr={3}\n                              mt={0}\n                              ml={1.5}\n                              display='flex'\n                              justifyContent='center'\n                              clone>\n                              <ListItemAvatar>\n                                <Avatar alt='Remy Sharp' src={item.image} />\n                              </ListItemAvatar>\n                            </Box>\n                            <Box my={0} clone>\n                              <ListItemText\n                                primary={\n                                  <Box\n                                    component='span'\n                                    fontWeight={Fonts.LIGHT}>\n                                    {item.name}\n                                  </Box>\n                                }\n                                secondary={\n                                  <Box\n                                    component='span'\n                                    display='block'\n                                    color='text.secondary'\n                                    overflow='hidden'\n                                    textOverflow='ellipsis'\n                                    whiteSpace='nowrap'>\n                                    @{item.handle}\n                                  </Box>\n                                }\n                              />\n                            </Box>\n                          </ListItem>\n                        </Box>\n                      </Box>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </Box>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default withStyles(styles)(MultipleDrop);\n"})),r.a.createElement(ae.a,{item:!0,xs:12},r.a.createElement(ee,{title:"Horizontal",component:I,source:"import React, {Component} from 'react';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\nimport Box from '@material-ui/core/Box';\nimport {Fonts} from '../../../../shared/constants/AppEnums';\nimport withStyles from '@material-ui/core/es/styles/withStyles';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst styles = (theme) => {\n  return {\n    rootList: {\n      backgroundColor: theme.palette.background.paper,\n    },\n  };\n};\n\nconst getListStyle = (isDraggingOver) => ({\n  // background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  border: '5px solid #E0E0E0',\n  display: 'flex',\n  padding: grid,\n  overflow: 'auto',\n});\n\nclass Horizontal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: simpleListData.slice(0, 6),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index,\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate core.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const {classes} = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId='droppable' direction='horizontal'>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}>\n              {this.state.items.map((item, index) => (\n                <Draggable\n                  key={item.id}\n                  draggableId={item.handle}\n                  index={index}>\n                  {(provided, snapshot) => (\n                    <Box\n                      mr={3}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}>\n                      <Box p={2} width='16rem' mr={2} clone>\n                        <ListItem className={classes.rootList}>\n                          <Box\n                            mr={3}\n                            mt={0}\n                            ml={1.5}\n                            display='flex'\n                            justifyContent='center'\n                            clone>\n                            <ListItemAvatar>\n                              <Avatar alt='Remy Sharp' src={item.image} />\n                            </ListItemAvatar>\n                          </Box>\n                          <Box my={0} clone>\n                            <ListItemText\n                              primary={\n                                <Box component='span' fontWeight={Fonts.MEDIUM}>\n                                  {item.name}\n                                </Box>\n                              }\n                              secondary={\n                                <Box\n                                  component='span'\n                                  display='block'\n                                  color='text.secondary'>\n                                  @{item.handle}\n                                </Box>\n                              }\n                            />\n                          </Box>\n                        </ListItem>\n                      </Box>\n                    </Box>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default withStyles(styles)(Horizontal);\n"}))))}}}]);
//# sourceMappingURL=170.62f8b544.chunk.js.map