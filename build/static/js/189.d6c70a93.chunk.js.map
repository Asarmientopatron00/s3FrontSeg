{"version":3,"sources":["modules/userPages/UserPages/ForgetPassword.js"],"names":["useStyles","makeStyles","theme","logo","height","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","form","textField","button","fontWeight","Fonts","BOLD","textTransform","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","email","id","required","ForgetPassword","classes","animation","delay","pb","py","xl","display","flex","flexDirection","alignItems","justifyContent","className","mb","xs","mr","src","alt","fontSize","component","validateOnChange","initialValues","onSubmit","data","setSubmitting","resetForm","isSubmitting","lg","name","label","variant","color","disabled","type"],"mappings":"gPAYMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,KAAM,CACJC,OAAQ,IAEVC,MAAI,GACFC,SAAU,IACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,cAZT,GAeJK,KAAM,CACJN,UAAW,QAEbO,UAAW,CACTR,MAAO,QAETS,OAAQ,CACNT,MAAO,OACPU,WAAYC,IAAMC,KAClBC,cAAe,aACfhB,OAAQ,QAGNiB,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,MAAOD,MAEJC,MAAM,kBAAC,IAAD,CAAcC,GAAG,4BACvBC,SAAS,kBAAC,IAAD,CAAcD,GAAG,gCA+EhBE,UA5EQ,WACrB,IAAMC,EAAUpC,IAChB,OACE,kBAAC,IAAD,CAAYqC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTC,QAAQ,OACRC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWX,EAAQ/B,MACvB,kBAAC,IAAD,CACE2C,GAAI,CAACC,GAAI,EAAGR,GAAI,GAChBC,QAAQ,OACRG,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAKI,GAAI,GACP,yBACEH,UAAWX,EAAQjC,KACnBgD,IAAK,qCACLC,IAAI,WAGR,kBAAC,IAAD,CAAKJ,GAAI,EAAG/B,WAAYC,IAAMC,KAAMkC,SAAU,IAC5C,kBAAC,IAAD,CAAcpB,GAAG,4BAIrB,kBAAC,IAAD,CAAKe,GAAI,CAACC,GAAI,EAAGR,GAAI,IAAKY,SAAU,IAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcpB,GAAG,kCAEnB,kBAAC,IAAD,CAAYqB,UAAU,KACpB,kBAAC,IAAD,CAAcrB,GAAG,mCAIrB,kBAAC,IAAD,CACEsB,kBAAkB,EAClBC,cAAe,CACbxB,MAAO,IAETF,iBAAkBA,EAClB2B,SAAU,SAACC,EAAD,GAAsC,EAA9BC,eAChBC,EAD8C,EAAfA,gBAGhC,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMd,UAAWX,EAAQtB,MACvB,kBAAC,IAAD,CAAKkC,GAAI,CAACC,GAAI,EAAGa,GAAI,EAAGrB,GAAI,KAC1B,kBAACpB,EAAD,CACE0C,KAAK,QACLC,MAAO,kBAAC,IAAD,CAAc/B,GAAG,wBACxBc,UAAWX,EAAQrB,UACnBkD,QAAQ,cAIZ,kBAAC,IAAD,CACEA,QAAQ,YACRC,MAAM,UACNC,SAAUN,EACVd,UAAWX,EAAQpB,OACnBoD,KAAK,UACL,kBAAC,IAAD,CAAcnC,GAAG","file":"static/js/189.d6c70a93.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles, Typography} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  logo: {\n    height: 24,\n  },\n  card: {\n    maxWidth: 576,\n    width: '100%',\n    textAlign: 'center',\n    padding: 32,\n    overflow: 'hidden',\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    [theme.breakpoints.up('lg')]: {\n      padding: 48,\n    },\n    [theme.breakpoints.up('xl')]: {\n      padding: '48px 64px',\n    },\n  },\n  form: {\n    textAlign: 'left',\n  },\n  textField: {\n    width: '100%',\n  },\n  button: {\n    width: '100%',\n    fontWeight: Fonts.BOLD,\n    textTransform: 'capitalize',\n    height: 44,\n  },\n}));\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email(<IntlMessages id='validation.emailFormat' />)\n    .required(<IntlMessages id='validation.emailRequired' />),\n});\n\nconst ForgetPassword = () => {\n  const classes = useStyles();\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Box\n            mb={{xs: 5, xl: 8}}\n            display='flex'\n            alignItems='center'\n            justifyContent='center'>\n            <Box mr={2}>\n              <img\n                className={classes.logo}\n                src={'/assets/images/logo-icon-large.png'}\n                alt='crema'\n              />\n            </Box>\n            <Box mb={1} fontWeight={Fonts.BOLD} fontSize={20}>\n              <IntlMessages id='common.forgetPassword' />\n            </Box>\n          </Box>\n\n          <Box mb={{xs: 6, xl: 12}} fontSize={14}>\n            <Typography>\n              <IntlMessages id='common.forgetPasswordTextOne' />\n            </Typography>\n            <Typography component='p'>\n              <IntlMessages id='common.forgetPasswordTextTwo' />\n            </Typography>\n          </Box>\n\n          <Formik\n            validateOnChange={true}\n            initialValues={{\n              email: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(data, {setSubmitting, resetForm}) => {\n              resetForm();\n            }}>\n            {({isSubmitting}) => (\n              <Form className={classes.form}>\n                <Box mb={{xs: 5, lg: 8, xl: 12}}>\n                  <MyTextField\n                    name='email'\n                    label={<IntlMessages id='common.emailAddress' />}\n                    className={classes.textField}\n                    variant='outlined'\n                  />\n                </Box>\n\n                <Button\n                  variant='contained'\n                  color='primary'\n                  disabled={isSubmitting}\n                  className={classes.button}\n                  type='submit'>\n                  <IntlMessages id='common.sendNewPassword' />\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ForgetPassword;\n"],"sourceRoot":""}