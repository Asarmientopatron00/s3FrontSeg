{"version":3,"sources":["modules/userPages/StyledUserPages/ForgetPassword.js"],"names":["useStyles","makeStyles","theme","styledImg","display","width","height","objectFit","textField","card","maxWidth","textAlign","overflow","boxShadow","form","button","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","email","id","required","ForgetPassword","classes","animation","delay","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","item","xs","lg","src","alt","title","p","px","mb","fontWeight","Fonts","BOLD","fontSize","component","validateOnChange","initialValues","onSubmit","data","setSubmitting","resetForm","isSubmitting","name","label","variant","color","disabled","type"],"mappings":"mPAaMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAAS,eACTC,MAAO,OACPC,OAAQ,OACRC,UAAW,SAEbC,UAAW,CACTH,MAAO,QAETI,KAAM,CACJC,SAAU,KACVL,MAAO,OACPM,UAAW,SACXC,SAAU,SACVC,UACE,2EAEJC,KAAM,CACJH,UAAW,QAEbI,OAAQ,CACNV,MAAO,OACPC,OAAQ,QAINU,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,MAAOD,MAEJC,MAAM,kBAAC,IAAD,CAAcC,GAAG,4BACvBC,SAAS,kBAAC,IAAD,CAAcD,GAAG,gCAoFhBE,UAjFQ,WACrB,IAAMC,EAAU/B,IAEhB,OACE,kBAAC,IAAD,CAAYgC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACThC,QAAQ,OACRiC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWV,EAAQtB,MACvB,kBAAC,IAAD,CAAMiC,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKxC,MAAM,OAAOC,OAAO,QACvB,yBACEmC,UAAWV,EAAQ5B,UACnB2C,IAAK,mDACLC,IAAI,QACJC,MAAM,YAKZ,kBAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKI,EAAG,CAACL,GAAI,EAAGC,GAAI,IAAKK,GAAI,CAACd,GAAI,IAAKD,GAAI,CAACC,GAAI,KAC9C,kBAAC,IAAD,CAAKe,GAAI,CAACP,GAAI,EAAGR,GAAI,GAAIgB,WAAYC,IAAMC,KAAMC,SAAU,IACzD,kBAAC,IAAD,CAAc3B,GAAG,2BAEnB,kBAAC,IAAD,CAAKuB,GAAI,CAACP,GAAI,EAAGR,GAAI,IAAKmB,SAAU,IAClC,kBAAC,IAAD,CAAYC,UAAU,KACpB,kBAAC,IAAD,CAAc5B,GAAG,kCAEnB,kBAAC,IAAD,CAAY4B,UAAU,KACpB,kBAAC,IAAD,CAAc5B,GAAG,mCAGrB,kBAAC,IAAD,CACE6B,kBAAkB,EAClBC,cAAe,CACb/B,MAAO,IAETF,iBAAkBA,EAClBkC,SAAU,SAACC,EAAD,GAAuC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC/BD,GAAc,GACdA,GAAc,GACdC,OAED,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMtB,UAAWV,EAAQjB,MACvB,kBAAC,IAAD,CAAKqC,GAAI,CAACP,GAAI,EAAGC,GAAI,EAAGT,GAAI,KAC1B,kBAACpB,EAAD,CACEgD,KAAK,QACLC,MAAO,kBAAC,IAAD,CAAcrC,GAAG,wBACxBa,UAAWV,EAAQvB,UACnB0D,QAAQ,cAIZ,kBAAC,IAAD,CACEA,QAAQ,YACRC,MAAM,UACNC,SAAUL,EACVtB,UAAWV,EAAQhB,OACnBsD,KAAK,UALP","file":"static/js/186.3b995f72.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles, Typography} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  styledImg: {\n    display: 'inline-block',\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n  textField: {\n    width: '100%',\n  },\n  card: {\n    maxWidth: 1024,\n    width: '100%',\n    textAlign: 'center',\n    overflow: 'hidden',\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n  },\n  form: {\n    textAlign: 'left',\n  },\n  button: {\n    width: '100%',\n    height: 44,\n  },\n}));\n\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email(<IntlMessages id='validation.emailFormat' />)\n    .required(<IntlMessages id='validation.emailRequired' />),\n});\n\nconst ForgetPassword = () => {\n  const classes = useStyles();\n\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Grid container>\n            <Grid item xs={12} lg={6}>\n              <Box width='100%' height='100%'>\n                <img\n                  className={classes.styledImg}\n                  src={'/assets/images/userPageImages/ForgotPassword.png'}\n                  alt='crema'\n                  title='crema'\n                />\n              </Box>\n            </Grid>\n\n            <Grid item xs={12} lg={6}>\n              <Box p={{xs: 8, lg: 12}} px={{xl: 16}} py={{xl: 12}}>\n                <Box mb={{xs: 4, xl: 8}} fontWeight={Fonts.BOLD} fontSize={20}>\n                  <IntlMessages id='common.forgetPassword' />\n                </Box>\n                <Box mb={{xs: 6, xl: 10}} fontSize={14}>\n                  <Typography component='p'>\n                    <IntlMessages id='common.forgetPasswordTextOne' />\n                  </Typography>\n                  <Typography component='p'>\n                    <IntlMessages id='common.forgetPasswordTextTwo' />\n                  </Typography>\n                </Box>\n                <Formik\n                  validateOnChange={true}\n                  initialValues={{\n                    email: '',\n                  }}\n                  validationSchema={validationSchema}\n                  onSubmit={(data, {setSubmitting, resetForm}) => {\n                    setSubmitting(true);\n                    setSubmitting(false);\n                    resetForm();\n                  }}>\n                  {({isSubmitting}) => (\n                    <Form className={classes.form}>\n                      <Box mb={{xs: 5, lg: 8, xl: 12}}>\n                        <MyTextField\n                          name='email'\n                          label={<IntlMessages id='common.emailAddress' />}\n                          className={classes.textField}\n                          variant='outlined'\n                        />\n                      </Box>\n\n                      <Button\n                        variant='contained'\n                        color='primary'\n                        disabled={isSubmitting}\n                        className={classes.button}\n                        type='submit'>\n                        Send password\n                      </Button>\n                    </Form>\n                  )}\n                </Formik>\n              </Box>\n            </Grid>\n          </Grid>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ForgetPassword;\n"],"sourceRoot":""}