(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[141],{3121:function(e,n,a){"use strict";a.r(n);var o=a(0),t=a.n(o),c=a(1081),l=a(306),r=a(305),m=a(304),i=a(2),h=a(8),d=a(22),s=a(1233);function u(){var e=t.a.useState({checkedA:!0,checkedB:!0,checkedF:!0}),n=Object(d.a)(e,2),a=n[0],o=n[1],c=function(e){return function(n){o(Object(h.a)(Object(h.a)({},a),{},Object(i.a)({},e,n.target.checked)))}};return t.a.createElement("div",null,t.a.createElement(s.a,{checked:a.checkedA,onChange:c("checkedA"),value:"checkedA",inputProps:{"aria-label":"primary checkbox"}}),t.a.createElement(s.a,{checked:a.checkedB,onChange:c("checkedB"),value:"checkedB",color:"primary",inputProps:{"aria-label":"secondary checkbox"}}),t.a.createElement(s.a,{value:"checkedC",inputProps:{"aria-label":"uncontrolled-checkbox"}}),t.a.createElement(s.a,{disabled:!0,value:"checkedD",inputProps:{"aria-label":"disabled checkbox"}}),t.a.createElement(s.a,{disabled:!0,checked:!0,value:"checkedE",inputProps:{"aria-label":"disabled checked checkbox"}}),t.a.createElement(s.a,{checked:a.checkedF,onChange:c("checkedF"),value:"checkedF",indeterminate:!0,inputProps:{"aria-label":"indeterminate checkbox"}}),t.a.createElement(s.a,{defaultChecked:!0,color:"default",value:"checkedG",inputProps:{"aria-label":"checkbox with default color"}}))}var b=a(21),k=a(204),p=a(1296),C=a(1279),f=a(2296),F=a.n(f),g=a(2297),x=a.n(g),v=a(1252),E=a.n(v),L=a(1459),y=a.n(L),G=Object(b.a)({root:{color:k.a[400],"&$checked":{color:k.a[600]}},checked:{}})((function(e){return t.a.createElement(s.a,Object.assign({color:"default"},e))}));function B(){var e=t.a.useState({checkedA:!0,checkedB:!0,checkedF:!0,checkedG:!0}),n=Object(d.a)(e,2),a=n[0],o=n[1],c=function(e){return function(n){o(Object(h.a)(Object(h.a)({},a),{},Object(i.a)({},e,n.target.checked)))}};return t.a.createElement(p.a,{row:!0},t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:a.checkedA,onChange:c("checkedA"),value:"checkedA"}),label:"Secondary"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:a.checkedB,onChange:c("checkedB"),value:"checkedB",color:"primary"}),label:"Primary"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{value:"checkedC"}),label:"Uncontrolled"}),t.a.createElement(C.a,{disabled:!0,control:t.a.createElement(s.a,{value:"checkedD"}),label:"Disabled"}),t.a.createElement(C.a,{disabled:!0,control:t.a.createElement(s.a,{checked:!0,value:"checkedE"}),label:"Disabled"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:a.checkedF,onChange:c("checkedF"),value:"checkedF",indeterminate:!0}),label:"Indeterminate"}),t.a.createElement(C.a,{control:t.a.createElement(G,{checked:a.checkedG,onChange:c("checkedG"),value:"checkedG"}),label:"Custom color"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{icon:t.a.createElement(y.a,null),checkedIcon:t.a.createElement(E.a,null),value:"checkedH"}),label:"Custom icon"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{icon:t.a.createElement(F.a,{fontSize:"small"}),checkedIcon:t.a.createElement(x.a,{fontSize:"small"}),value:"checkedI"}),label:"Custom size"}))}var j=a(164),P=a(1450),S=a(1314),A=a(1353),O=a(67),w=Object(j.a)((function(e){return{root:Object(i.a)({display:"flex",flexDirection:"column"},e.breakpoints.up("sm"),{flexDirection:"row"}),formControl:{margin:e.spacing(3)}}}));function I(){var e=w(),n=t.a.useState({gilad:!0,jason:!1,antoine:!1}),a=Object(d.a)(n,2),o=a[0],c=a[1],l=function(e){return function(n){c(Object(h.a)(Object(h.a)({},o),{},Object(i.a)({},e,n.target.checked)))}},r=o.gilad,m=o.jason,u=o.antoine,b=2!==[r,m,u].filter((function(e){return e})).length;return t.a.createElement(O.a,{className:e.root},t.a.createElement(S.a,{component:"fieldset",className:e.formControl},t.a.createElement(P.a,{component:"legend"},"Assign responsibility"),t.a.createElement(p.a,null,t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:r,onChange:l("gilad"),value:"gilad"}),label:"Gilad Gray"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:m,onChange:l("jason"),value:"jason"}),label:"Jason Killian"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:u,onChange:l("antoine"),value:"antoine"}),label:"Antoine Llorca"})),t.a.createElement(A.a,null,"Be careful")),t.a.createElement(S.a,{required:!0,error:b,component:"fieldset",className:e.formControl},t.a.createElement(P.a,{component:"legend"},"Pick two"),t.a.createElement(p.a,null,t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:r,onChange:l("gilad"),value:"gilad"}),label:"Gilad Gray"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:m,onChange:l("jason"),value:"jason"}),label:"Jason Killian"}),t.a.createElement(C.a,{control:t.a.createElement(s.a,{checked:u,onChange:l("antoine"),value:"antoine"}),label:"Antoine Llorca"})),t.a.createElement(A.a,null,"You can display an error")))}var D=function(){var e=t.a.useState("female"),n=Object(d.a)(e,2),a=n[0],o=n[1];return t.a.createElement(S.a,{component:"fieldset"},t.a.createElement(P.a,{component:"legend"},"labelPlacement"),t.a.createElement(p.a,{"aria-label":"position",name:"position",value:a,onChange:function(e){o(e.target.value)},row:!0},t.a.createElement(C.a,{value:"top",control:t.a.createElement(s.a,{color:"primary"}),label:"Top",labelPlacement:"top"}),t.a.createElement(C.a,{value:"start",control:t.a.createElement(s.a,{color:"primary"}),label:"Start",labelPlacement:"start"}),t.a.createElement(C.a,{value:"bottom",control:t.a.createElement(s.a,{color:"primary"}),label:"Bottom",labelPlacement:"bottom"}),t.a.createElement(C.a,{value:"end",control:t.a.createElement(s.a,{color:"primary"}),label:"End",labelPlacement:"end"})))};n.default=function(){return t.a.createElement(t.a.Fragment,null,t.a.createElement(r.a,{title:"Checkboxes",description:"Checkboxes allow the user to select one or more items from a set.",refUrl:"https://material-ui.com/components/checkboxes/"}),t.a.createElement(m.a,null,t.a.createElement(c.a,{item:!0,xs:12},t.a.createElement(l.a,{title:"Checkboxes",component:u,source:"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nexport default function Checkboxes() {\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n  });\n\n  const handleChange = (name) => (event) => {\n    setState({...state, [name]: event.target.checked});\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={state.checkedA}\n        onChange={handleChange('checkedA')}\n        value='checkedA'\n        inputProps={{\n          'aria-label': 'primary checkbox',\n        }}\n      />\n      <Checkbox\n        checked={state.checkedB}\n        onChange={handleChange('checkedB')}\n        value='checkedB'\n        color='primary'\n        inputProps={{\n          'aria-label': 'secondary checkbox',\n        }}\n      />\n      <Checkbox\n        value='checkedC'\n        inputProps={{\n          'aria-label': 'uncontrolled-checkbox',\n        }}\n      />\n      <Checkbox\n        disabled\n        value='checkedD'\n        inputProps={{\n          'aria-label': 'disabled checkbox',\n        }}\n      />\n      <Checkbox\n        disabled\n        checked\n        value='checkedE'\n        inputProps={{\n          'aria-label': 'disabled checked checkbox',\n        }}\n      />\n      <Checkbox\n        checked={state.checkedF}\n        onChange={handleChange('checkedF')}\n        value='checkedF'\n        indeterminate\n        inputProps={{\n          'aria-label': 'indeterminate checkbox',\n        }}\n      />\n      <Checkbox\n        defaultChecked\n        color='default'\n        value='checkedG'\n        inputProps={{\n          'aria-label': 'checkbox with default color',\n        }}\n      />\n    </div>\n  );\n}\n",description:"Checkboxes can be used to turn an option on or off."})),t.a.createElement(c.a,{item:!0,xs:12},t.a.createElement(l.a,{title:"FormControl Label Checkboxes",component:B,source:"import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport {green} from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color='default' {...props} />);\n\nexport default function CheckboxLabels() {\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n    checkedG: true,\n  });\n\n  const handleChange = (name) => (event) => {\n    setState({...state, [name]: event.target.checked});\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checkedA}\n            onChange={handleChange('checkedA')}\n            value='checkedA'\n          />\n        }\n        label='Secondary'\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checkedB}\n            onChange={handleChange('checkedB')}\n            value='checkedB'\n            color='primary'\n          />\n        }\n        label='Primary'\n      />\n      <FormControlLabel\n        control={<Checkbox value='checkedC' />}\n        label='Uncontrolled'\n      />\n      <FormControlLabel\n        disabled\n        control={<Checkbox value='checkedD' />}\n        label='Disabled'\n      />\n      <FormControlLabel\n        disabled\n        control={<Checkbox checked value='checkedE' />}\n        label='Disabled'\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.checkedF}\n            onChange={handleChange('checkedF')}\n            value='checkedF'\n            indeterminate\n          />\n        }\n        label='Indeterminate'\n      />\n      <FormControlLabel\n        control={\n          <GreenCheckbox\n            checked={state.checkedG}\n            onChange={handleChange('checkedG')}\n            value='checkedG'\n          />\n        }\n        label='Custom color'\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            icon={<FavoriteBorder />}\n            checkedIcon={<Favorite />}\n            value='checkedH'\n          />\n        }\n        label='Custom icon'\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            icon={<CheckBoxOutlineBlankIcon fontSize='small' />}\n            checkedIcon={<CheckBoxIcon fontSize='small' />}\n            value='checkedI'\n          />\n        }\n        label='Custom size'\n      />\n    </FormGroup>\n  );\n}\n",description:"Checkbox can also be used with a label description thanks to the FormControlLabel component."})),t.a.createElement(c.a,{item:!0,xs:12,lg:6},t.a.createElement(l.a,{title:"Checkboxes with FormGroup",component:I,source:"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    [theme.breakpoints.up('sm')]: {\n      flexDirection: 'row',\n    },\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function CheckboxesGroup() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    gilad: true,\n    jason: false,\n    antoine: false,\n  });\n\n  const handleChange = (name) => (event) => {\n    setState({...state, [name]: event.target.checked});\n  };\n\n  const {gilad, jason, antoine} = state;\n  const error = [gilad, jason, antoine].filter((v) => v).length !== 2;\n\n  return (\n    <Box className={classes.root}>\n      <FormControl component='fieldset' className={classes.formControl}>\n        <FormLabel component='legend'>Assign responsibility</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={gilad}\n                onChange={handleChange('gilad')}\n                value='gilad'\n              />\n            }\n            label='Gilad Gray'\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={jason}\n                onChange={handleChange('jason')}\n                value='jason'\n              />\n            }\n            label='Jason Killian'\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={antoine}\n                onChange={handleChange('antoine')}\n                value='antoine'\n              />\n            }\n            label='Antoine Llorca'\n          />\n        </FormGroup>\n        <FormHelperText>Be careful</FormHelperText>\n      </FormControl>\n      <FormControl\n        required\n        error={error}\n        component='fieldset'\n        className={classes.formControl}>\n        <FormLabel component='legend'>Pick two</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={gilad}\n                onChange={handleChange('gilad')}\n                value='gilad'\n              />\n            }\n            label='Gilad Gray'\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={jason}\n                onChange={handleChange('jason')}\n                value='jason'\n              />\n            }\n            label='Jason Killian'\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={antoine}\n                onChange={handleChange('antoine')}\n                value='antoine'\n              />\n            }\n            label='Antoine Llorca'\n          />\n        </FormGroup>\n        <FormHelperText>You can display an error</FormHelperText>\n      </FormControl>\n    </Box>\n  );\n}\n",description:"FormGroup is a helpful wrapper used to group selection controls components that provides an easier API."})),t.a.createElement(c.a,{item:!0,xs:12,lg:6},t.a.createElement(l.a,{title:"Label placement",component:D,source:"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction FormControlLabelPosition() {\n  const [value, setValue] = React.useState('female');\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  return (\n    <FormControl component='fieldset'>\n      <FormLabel component='legend'>labelPlacement</FormLabel>\n      <FormGroup\n        aria-label='position'\n        name='position'\n        value={value}\n        onChange={handleChange}\n        row>\n        <FormControlLabel\n          value='top'\n          control={<Checkbox color='primary' />}\n          label='Top'\n          labelPlacement='top'\n        />\n        <FormControlLabel\n          value='start'\n          control={<Checkbox color='primary' />}\n          label='Start'\n          labelPlacement='start'\n        />\n        <FormControlLabel\n          value='bottom'\n          control={<Checkbox color='primary' />}\n          label='Bottom'\n          labelPlacement='bottom'\n        />\n        <FormControlLabel\n          value='end'\n          control={<Checkbox color='primary' />}\n          label='End'\n          labelPlacement='end'\n        />\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nexport default FormControlLabelPosition;\n",description:"You can change the placement of the label"}))))}}}]);
//# sourceMappingURL=141.cd5792f5.chunk.js.map