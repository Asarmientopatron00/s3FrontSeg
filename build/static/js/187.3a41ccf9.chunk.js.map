{"version":3,"sources":["modules/userPages/StyledUserPages/ResetPassword.js"],"names":["useStyles","makeStyles","theme","styledImg","display","breakpoints","up","paddingRight","textField","width","card","maxWidth","textAlign","overflow","padding","boxShadow","paddingLeft","grid","alignSelf","form","button","height","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","oldPassword","required","id","newPassword","confirmPassword","ResetPassword","classes","animation","delay","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","pr","lg","src","alt","title","mb","fontWeight","Fonts","BOLD","fontSize","validateOnChange","initialValues","onSubmit","data","setErrors","resetForm","isSubmitting","clone","noValidate","autoComplete","name","label","variant","type","color","disabled"],"mappings":"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","file":"static/js/187.3a41ccf9.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport Grid from '@material-ui/core/Grid';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport {makeStyles} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => ({\n  styledImg: {\n    display: 'inline-block',\n    [theme.breakpoints.up('lg')]: {\n      paddingRight: 40,\n    },\n  },\n  textField: {\n    width: '100%',\n  },\n  card: {\n    maxWidth: 1024,\n    width: '100%',\n    textAlign: 'center',\n    overflow: 'hidden',\n    padding: 32,\n    boxShadow:\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    [theme.breakpoints.up('md')]: {\n      padding: 48,\n    },\n    [theme.breakpoints.up('lg')]: {\n      paddingRight: 48,\n      paddingLeft: 32,\n    },\n    [theme.breakpoints.up('xl')]: {\n      paddingRight: 80,\n      paddingLeft: 80,\n    },\n  },\n  grid: {\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      alignSelf: 'center',\n    },\n  },\n  form: {\n    textAlign: 'left',\n  },\n  button: {\n    width: '100%',\n    height: 44,\n  },\n}));\n\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  oldPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.enterOldPassword' />),\n  newPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.enterNewPassword' />),\n  confirmPassword: yup\n    .string()\n    .required(<IntlMessages id='validation.reTypePassword' />),\n});\n\nconst ResetPassword = () => {\n  const classes = useStyles();\n\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        pb={6}\n        py={{xl: 8}}\n        display='flex'\n        flex={1}\n        flexDirection='column'\n        alignItems='center'\n        justifyContent='center'>\n        <Card className={classes.card}>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={6} className={classes.grid}>\n              <Box pr={{lg: 10}} display='inline-block'>\n                <img\n                  className={classes.styledImg}\n                  src={'/assets/images/userPageImages/ResetPassword.png'}\n                  alt='crema'\n                  title='crema'\n                />\n              </Box>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Box mb={{xs: 6, xl: 8}} fontWeight={Fonts.BOLD} fontSize={20}>\n                <IntlMessages id='common.resetPassword' />\n              </Box>\n              <Formik\n                validateOnChange={true}\n                initialValues={{\n                  oldPassword: '',\n                  newPassword: '',\n                  confirmPassword: '',\n                }}\n                validationSchema={validationSchema}\n                onSubmit={(data, {setErrors, resetForm}) => {\n                  if (data.newPassword !== data.confirmPassword) {\n                    setErrors({\n                      confirmPassword: (\n                        <IntlMessages id='validation.passwordMisMatch' />\n                      ),\n                    });\n                  } else {\n                    resetForm();\n                  }\n                }}>\n                {({isSubmitting}) => (\n                  <Box textAlign='left' clone>\n                    <Form noValidate autoComplete='off'>\n                      <Box mb={{xs: 5, lg: 8}}>\n                        <MyTextField\n                          name='oldPassword'\n                          label={<IntlMessages id='common.oldPassword' />}\n                          className={classes.textField}\n                          variant='outlined'\n                          type='password'\n                        />\n                      </Box>\n\n                      <Box mb={{xs: 5, lg: 8}}>\n                        <MyTextField\n                          name='newPassword'\n                          label={<IntlMessages id='common.newPassword' />}\n                          className={classes.textField}\n                          variant='outlined'\n                          type='password'\n                        />\n                      </Box>\n\n                      <Box mb={{xs: 5, lg: 8}}>\n                        <MyTextField\n                          name='confirmPassword'\n                          label={<IntlMessages id='common.retypePassword' />}\n                          className={classes.textField}\n                          variant='outlined'\n                          type='password'\n                        />\n                      </Box>\n\n                      <Button\n                        variant='contained'\n                        color='primary'\n                        disabled={isSubmitting}\n                        className={classes.button}\n                        type='submit'>\n                        {<IntlMessages id='common.resetMyPassword' />}\n                      </Button>\n                    </Form>\n                  </Box>\n                )}\n              </Formik>\n            </Grid>\n          </Grid>\n        </Card>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ResetPassword;\n"],"sourceRoot":""}