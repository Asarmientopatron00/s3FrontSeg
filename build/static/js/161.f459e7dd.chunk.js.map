{"version":3,"sources":["modules/muiComponents/util/Popover/SimplePopover.js","webpack:///./src/modules/muiComponents/util/Popover/SimplePopover.js?9814","modules/muiComponents/util/Popover/AnchorPlayground.js","modules/muiComponents/util/Popover/MouseOverInteraction.js","webpack:///./src/modules/muiComponents/util/Popover/MouseOverInteraction.js?09d8","modules/muiComponents/util/Popover/PopupStateHelper.js","modules/muiComponents/util/Popover/index.js","webpack:///./src/modules/muiComponents/util/Popover/AnchorPlayground.js?1ba8","webpack:///./src/modules/muiComponents/util/Popover/PopupStateHelper.js?80b5"],"names":["useStyles","makeStyles","theme","typography","padding","spacing","SimplePopover","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","id","undefined","Button","aria-describedby","variant","onClick","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","className","AnchorPlayground","state","anchorOriginVertical","anchorOriginHorizontal","transformOriginVertical","transformOriginHorizontal","positionTop","positionLeft","anchorReference","button","handleChange","key","value","setState","handleNumberInputChange","parseInt","target","handleClickButton","findDOMNode","handleRequestClose","this","Box","mb","clone","ref","node","anchorPosition","top","left","component","m","Grid","container","item","xs","sm","FormControl","FormLabel","RadioGroup","row","aria-label","name","onChange","FormControlLabel","control","Radio","label","InputLabel","htmlFor","Input","type","Component","popover","pointerEvents","paper","MouseOverPopover","handlePopoverClose","aria-owns","aria-haspopup","onMouseEnter","onMouseLeave","disableRestoreFocus","margin","PopoverPopupState","popupId","popupState","bindTrigger","bindPopover","Popovers","ComponentHeader","title","description","refUrl","GridContainer","lg","ComponentCard","source","MouseOverInteraction","PopupStateHelper"],"mappings":"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","file":"static/js/161.f459e7dd.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  typography: {\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function SimplePopover() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <div>\n      <Button aria-describedby={id} variant='contained' onClick={handleClick}>\n        Open Popover\n      </Button>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}>\n        <Typography className={classes.typography}>\n          The content of the Popover.\n        </Typography>\n      </Popover>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport {makeStyles} from '@material-ui/core/styles';\\nimport Popover from '@material-ui/core/Popover';\\nimport Typography from '@material-ui/core/Typography';\\nimport Button from '@material-ui/core/Button';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  typography: {\\n    padding: theme.spacing(2),\\n  },\\n}));\\n\\nexport default function SimplePopover() {\\n  const classes = useStyles();\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\n\\n  function handleClick(event) {\\n    setAnchorEl(event.currentTarget);\\n  }\\n\\n  function handleClose() {\\n    setAnchorEl(null);\\n  }\\n\\n  const open = Boolean(anchorEl);\\n  const id = open ? 'simple-popover' : undefined;\\n\\n  return (\\n    <div>\\n      <Button aria-describedby={id} variant='contained' onClick={handleClick}>\\n        Open Popover\\n      </Button>\\n      <Popover\\n        id={id}\\n        open={open}\\n        anchorEl={anchorEl}\\n        onClose={handleClose}\\n        anchorOrigin={{\\n          vertical: 'bottom',\\n          horizontal: 'center',\\n        }}\\n        transformOrigin={{\\n          vertical: 'top',\\n          horizontal: 'center',\\n        }}>\\n        <Typography className={classes.typography}>\\n          The content of the Popover.\\n        </Typography>\\n      </Popover>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport {findDOMNode} from 'react-dom';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Box from '@material-ui/core/Box';\n\nclass AnchorPlayground extends React.Component {\n  state = {\n    open: false,\n    anchorEl: null,\n    anchorOriginVertical: 'bottom',\n    anchorOriginHorizontal: 'center',\n    transformOriginVertical: 'top',\n    transformOriginHorizontal: 'center',\n    positionTop: 200, // Just so the popover can be spotted more easily\n    positionLeft: 400, // Same as above\n    anchorReference: 'anchorEl',\n  };\n  button = null;\n\n  handleChange = (key) => (event, value) => {\n    this.setState({\n      [key]: value,\n    });\n  };\n\n  handleNumberInputChange = (key) => (event) => {\n    this.setState({\n      [key]: parseInt(event.target.value, 10),\n    });\n  };\n\n  handleClickButton = () => {\n    this.setState({\n      open: true,\n      anchorEl: findDOMNode(this.button),\n    });\n  };\n\n  handleRequestClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  render() {\n    const {\n      open,\n      anchorEl,\n      anchorOriginVertical,\n      anchorOriginHorizontal,\n      transformOriginVertical,\n      transformOriginHorizontal,\n      positionTop,\n      positionLeft,\n      anchorReference,\n    } = this.state;\n\n    return (\n      <div>\n        <Box mb={5} clone>\n          <Button\n            ref={(node) => {\n              this.button = node;\n            }}\n            variant='contained'\n            onClick={this.handleClickButton}>\n            Open Popover\n          </Button>\n        </Box>\n        <Popover\n          open={open}\n          anchorEl={anchorEl}\n          anchorReference={anchorReference}\n          anchorPosition={{top: positionTop, left: positionLeft}}\n          onClose={this.handleRequestClose}\n          anchorOrigin={{\n            vertical: anchorOriginVertical,\n            horizontal: anchorOriginHorizontal,\n          }}\n          transformOrigin={{\n            vertical: transformOriginVertical,\n            horizontal: transformOriginHorizontal,\n          }}>\n          <Box component='p' m={3}>\n            The content of the Popover.\n          </Box>\n        </Popover>\n        <Grid container>\n          <Grid item xs={12} sm={6}>\n            <FormControl component='fieldset'>\n              <FormLabel component='legend'>Anchor Reference</FormLabel>\n              <RadioGroup\n                row\n                aria-label='anchorReference'\n                name='anchorReference'\n                value={this.state.anchorReference}\n                onChange={this.handleChange('anchorReference')}>\n                <FormControlLabel\n                  value='anchorEl'\n                  control={<Radio />}\n                  label='Anchor El'\n                />\n                <FormControlLabel\n                  value='anchorPosition'\n                  control={<Radio />}\n                  label='Anchor Position'\n                />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl>\n              <InputLabel htmlFor='position-top'>\n                Anchor Position Top\n              </InputLabel>\n              <Input\n                id='position-top'\n                type='number'\n                value={this.state.positionTop}\n                onChange={this.handleNumberInputChange('positionTop')}\n              />\n            </FormControl>\n            &nbsp;\n            <FormControl>\n              <InputLabel htmlFor='position-left'>\n                Anchor Position Left\n              </InputLabel>\n              <Input\n                id='position-left'\n                type='number'\n                value={this.state.positionLeft}\n                onChange={this.handleNumberInputChange('positionLeft')}\n              />\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl component='fieldset'>\n              <FormLabel component='legend'>Anchor Origin Vertical</FormLabel>\n              <RadioGroup\n                aria-label='anchorOriginVertical'\n                name='anchorOriginVertical'\n                value={this.state.anchorOriginVertical}\n                onChange={this.handleChange('anchorOriginVertical')}>\n                <FormControlLabel value='top' control={<Radio />} label='Top' />\n                <FormControlLabel\n                  value='center'\n                  control={<Radio />}\n                  label='Center'\n                />\n                <FormControlLabel\n                  value='bottom'\n                  control={<Radio />}\n                  label='Bottom'\n                />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl component='fieldset'>\n              <FormLabel component='legend'>\n                Transform Origin Vertical\n              </FormLabel>\n              <RadioGroup\n                aria-label='transformOriginVertical'\n                name='transformOriginVertical'\n                value={this.state.transformOriginVertical}\n                onChange={this.handleChange('transformOriginVertical')}>\n                <FormControlLabel value='top' control={<Radio />} label='Top' />\n                <FormControlLabel\n                  value='center'\n                  control={<Radio />}\n                  label='Center'\n                />\n                <FormControlLabel\n                  value='bottom'\n                  control={<Radio />}\n                  label='Bottom'\n                />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl component='fieldset'>\n              <FormLabel component='legend'>Anchor Origin Horizontal</FormLabel>\n              <RadioGroup\n                row\n                aria-label='anchorOriginHorizontal'\n                name='anchorOriginHorizontal'\n                value={this.state.anchorOriginHorizontal}\n                onChange={this.handleChange('anchorOriginHorizontal')}>\n                <FormControlLabel\n                  value='left'\n                  control={<Radio />}\n                  label='Left'\n                />\n                <FormControlLabel\n                  value='center'\n                  control={<Radio />}\n                  label='Center'\n                />\n                <FormControlLabel\n                  value='right'\n                  control={<Radio />}\n                  label='Right'\n                />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl component='fieldset'>\n              <FormLabel component='legend'>\n                Transform Origin Horizontal\n              </FormLabel>\n              <RadioGroup\n                row\n                aria-label='transformOriginHorizontal'\n                name='transformOriginHorizontal'\n                value={this.state.transformOriginHorizontal}\n                onChange={this.handleChange('transformOriginHorizontal')}>\n                <FormControlLabel\n                  value='left'\n                  control={<Radio />}\n                  label='Left'\n                />\n                <FormControlLabel\n                  value='center'\n                  control={<Radio />}\n                  label='Center'\n                />\n                <FormControlLabel\n                  value='right'\n                  control={<Radio />}\n                  label='Right'\n                />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default AnchorPlayground;\n","import React from 'react';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  popover: {\n    pointerEvents: 'none',\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport default function MouseOverPopover() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  function handlePopoverOpen(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handlePopoverClose() {\n    setAnchorEl(null);\n  }\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <div>\n      <Typography\n        aria-owns={open ? 'mouse-over-popover' : undefined}\n        aria-haspopup='true'\n        onMouseEnter={handlePopoverOpen}\n        onMouseLeave={handlePopoverClose}>\n        Hover with a Popover.\n      </Typography>\n      <Popover\n        id='mouse-over-popover'\n        className={classes.popover}\n        classes={{\n          paper: classes.paper,\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        onClose={handlePopoverClose}\n        disableRestoreFocus>\n        <Typography>I use Popover.</Typography>\n      </Popover>\n    </div>\n  );\n}\n","export default \"import React from 'react';\\nimport Popover from '@material-ui/core/Popover';\\nimport Typography from '@material-ui/core/Typography';\\nimport {makeStyles} from '@material-ui/core/styles';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  popover: {\\n    pointerEvents: 'none',\\n  },\\n  paper: {\\n    padding: theme.spacing(1),\\n  },\\n}));\\n\\nexport default function MouseOverPopover() {\\n  const classes = useStyles();\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\n\\n  function handlePopoverOpen(event) {\\n    setAnchorEl(event.currentTarget);\\n  }\\n\\n  function handlePopoverClose() {\\n    setAnchorEl(null);\\n  }\\n\\n  const open = Boolean(anchorEl);\\n\\n  return (\\n    <div>\\n      <Typography\\n        aria-owns={open ? 'mouse-over-popover' : undefined}\\n        aria-haspopup='true'\\n        onMouseEnter={handlePopoverOpen}\\n        onMouseLeave={handlePopoverClose}>\\n        Hover with a Popover.\\n      </Typography>\\n      <Popover\\n        id='mouse-over-popover'\\n        className={classes.popover}\\n        classes={{\\n          paper: classes.paper,\\n        }}\\n        open={open}\\n        anchorEl={anchorEl}\\n        anchorOrigin={{\\n          vertical: 'bottom',\\n          horizontal: 'left',\\n        }}\\n        transformOrigin={{\\n          vertical: 'top',\\n          horizontal: 'left',\\n        }}\\n        onClose={handlePopoverClose}\\n        disableRestoreFocus>\\n        <Typography>I use Popover.</Typography>\\n      </Popover>\\n    </div>\\n  );\\n}\\n\";","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport PopupState, {bindPopover, bindTrigger} from 'material-ui-popup-state';\n\nconst useStyles = makeStyles((theme) => ({\n  typography: {\n    margin: theme.spacing(2),\n  },\n}));\n\nexport default function PopoverPopupState() {\n  const classes = useStyles();\n\n  return (\n    <PopupState variant='popover' popupId='demo-popup-popover'>\n      {(popupState) => (\n        <div>\n          <Button variant='contained' {...bindTrigger(popupState)}>\n            Open Popover\n          </Button>\n          <Popover\n            {...bindPopover(popupState)}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'center',\n            }}>\n            <Typography className={classes.typography}>\n              The content of the Popover.\n            </Typography>\n          </Popover>\n        </div>\n      )}\n    </PopupState>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport ComponentCard from '@crema/core/ComponentCard';\nimport ComponentHeader from '@crema/core/ComponentHeader';\nimport GridContainer from '@crema/core/GridContainer';\n\nimport SimplePopover from './SimplePopover';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport SimplePopoverSource from '!raw-loader!./SimplePopover';\nimport AnchorPlayground from './AnchorPlayground';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AnchorPlaygroundSource from '!raw-loader!./AnchorPlayground';\nimport MouseOverInteraction from './MouseOverInteraction';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport MouseOverInteractionSource from '!raw-loader!./MouseOverInteraction';\nimport PopupStateHelper from './PopupStateHelper';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport PopupStateHelperSource from '!raw-loader!./PopupStateHelper';\n\nconst Popovers = () => {\n  return (\n    <>\n      <ComponentHeader\n        title='Popover'\n        description='A Popover can be used to display some content on top of another.'\n        refUrl='https://material-ui.com/components/popover/'\n      />\n\n      <GridContainer>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Simple Popover'\n            component={SimplePopover}\n            source={SimplePopoverSource}\n            description='The scroll and click away are blocked unlike with the Popper component.'\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ComponentCard\n            title='Mouse over interaction'\n            component={MouseOverInteraction}\n            source={MouseOverInteractionSource}\n            description='This demonstrates how to use the Popover component to implement a popover behavior based on the mouse over event.'\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <ComponentCard\n            title='Anchor playground'\n            component={AnchorPlayground}\n            source={AnchorPlaygroundSource}\n            description='Use the radio buttons to adjust the anchorOrigin and transformOrigin positions. You can also set the anchorReference to anchorPosition or anchorEl. When it is anchorPosition, the component will, instead of anchorEl, refer to the anchorPosition prop which you can adjust to set the position of the popover.'\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <ComponentCard\n            title='PopupState helper'\n            component={PopupStateHelper}\n            source={PopupStateHelperSource}\n            description='There is a 3rd party package material-ui-popup-state that takes care of popover state for you in most cases.'\n          />\n        </Grid>\n      </GridContainer>\n    </>\n  );\n};\n\nexport default Popovers;\n","export default \"import React from 'react';\\nimport {findDOMNode} from 'react-dom';\\nimport FormControl from '@material-ui/core/FormControl';\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\nimport FormLabel from '@material-ui/core/FormLabel';\\nimport Radio from '@material-ui/core/Radio';\\nimport RadioGroup from '@material-ui/core/RadioGroup';\\nimport Grid from '@material-ui/core/Grid';\\nimport Button from '@material-ui/core/Button';\\nimport Popover from '@material-ui/core/Popover';\\nimport Input from '@material-ui/core/Input';\\nimport InputLabel from '@material-ui/core/InputLabel';\\nimport Box from '@material-ui/core/Box';\\n\\nclass AnchorPlayground extends React.Component {\\n  state = {\\n    open: false,\\n    anchorEl: null,\\n    anchorOriginVertical: 'bottom',\\n    anchorOriginHorizontal: 'center',\\n    transformOriginVertical: 'top',\\n    transformOriginHorizontal: 'center',\\n    positionTop: 200, // Just so the popover can be spotted more easily\\n    positionLeft: 400, // Same as above\\n    anchorReference: 'anchorEl',\\n  };\\n  button = null;\\n\\n  handleChange = (key) => (event, value) => {\\n    this.setState({\\n      [key]: value,\\n    });\\n  };\\n\\n  handleNumberInputChange = (key) => (event) => {\\n    this.setState({\\n      [key]: parseInt(event.target.value, 10),\\n    });\\n  };\\n\\n  handleClickButton = () => {\\n    this.setState({\\n      open: true,\\n      anchorEl: findDOMNode(this.button),\\n    });\\n  };\\n\\n  handleRequestClose = () => {\\n    this.setState({\\n      open: false,\\n    });\\n  };\\n\\n  render() {\\n    const {\\n      open,\\n      anchorEl,\\n      anchorOriginVertical,\\n      anchorOriginHorizontal,\\n      transformOriginVertical,\\n      transformOriginHorizontal,\\n      positionTop,\\n      positionLeft,\\n      anchorReference,\\n    } = this.state;\\n\\n    return (\\n      <div>\\n        <Box mb={5} clone>\\n          <Button\\n            ref={(node) => {\\n              this.button = node;\\n            }}\\n            variant='contained'\\n            onClick={this.handleClickButton}>\\n            Open Popover\\n          </Button>\\n        </Box>\\n        <Popover\\n          open={open}\\n          anchorEl={anchorEl}\\n          anchorReference={anchorReference}\\n          anchorPosition={{top: positionTop, left: positionLeft}}\\n          onClose={this.handleRequestClose}\\n          anchorOrigin={{\\n            vertical: anchorOriginVertical,\\n            horizontal: anchorOriginHorizontal,\\n          }}\\n          transformOrigin={{\\n            vertical: transformOriginVertical,\\n            horizontal: transformOriginHorizontal,\\n          }}>\\n          <Box component='p' m={3}>\\n            The content of the Popover.\\n          </Box>\\n        </Popover>\\n        <Grid container>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl component='fieldset'>\\n              <FormLabel component='legend'>Anchor Reference</FormLabel>\\n              <RadioGroup\\n                row\\n                aria-label='anchorReference'\\n                name='anchorReference'\\n                value={this.state.anchorReference}\\n                onChange={this.handleChange('anchorReference')}>\\n                <FormControlLabel\\n                  value='anchorEl'\\n                  control={<Radio />}\\n                  label='Anchor El'\\n                />\\n                <FormControlLabel\\n                  value='anchorPosition'\\n                  control={<Radio />}\\n                  label='Anchor Position'\\n                />\\n              </RadioGroup>\\n            </FormControl>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl>\\n              <InputLabel htmlFor='position-top'>\\n                Anchor Position Top\\n              </InputLabel>\\n              <Input\\n                id='position-top'\\n                type='number'\\n                value={this.state.positionTop}\\n                onChange={this.handleNumberInputChange('positionTop')}\\n              />\\n            </FormControl>\\n            &nbsp;\\n            <FormControl>\\n              <InputLabel htmlFor='position-left'>\\n                Anchor Position Left\\n              </InputLabel>\\n              <Input\\n                id='position-left'\\n                type='number'\\n                value={this.state.positionLeft}\\n                onChange={this.handleNumberInputChange('positionLeft')}\\n              />\\n            </FormControl>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl component='fieldset'>\\n              <FormLabel component='legend'>Anchor Origin Vertical</FormLabel>\\n              <RadioGroup\\n                aria-label='anchorOriginVertical'\\n                name='anchorOriginVertical'\\n                value={this.state.anchorOriginVertical}\\n                onChange={this.handleChange('anchorOriginVertical')}>\\n                <FormControlLabel value='top' control={<Radio />} label='Top' />\\n                <FormControlLabel\\n                  value='center'\\n                  control={<Radio />}\\n                  label='Center'\\n                />\\n                <FormControlLabel\\n                  value='bottom'\\n                  control={<Radio />}\\n                  label='Bottom'\\n                />\\n              </RadioGroup>\\n            </FormControl>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl component='fieldset'>\\n              <FormLabel component='legend'>\\n                Transform Origin Vertical\\n              </FormLabel>\\n              <RadioGroup\\n                aria-label='transformOriginVertical'\\n                name='transformOriginVertical'\\n                value={this.state.transformOriginVertical}\\n                onChange={this.handleChange('transformOriginVertical')}>\\n                <FormControlLabel value='top' control={<Radio />} label='Top' />\\n                <FormControlLabel\\n                  value='center'\\n                  control={<Radio />}\\n                  label='Center'\\n                />\\n                <FormControlLabel\\n                  value='bottom'\\n                  control={<Radio />}\\n                  label='Bottom'\\n                />\\n              </RadioGroup>\\n            </FormControl>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl component='fieldset'>\\n              <FormLabel component='legend'>Anchor Origin Horizontal</FormLabel>\\n              <RadioGroup\\n                row\\n                aria-label='anchorOriginHorizontal'\\n                name='anchorOriginHorizontal'\\n                value={this.state.anchorOriginHorizontal}\\n                onChange={this.handleChange('anchorOriginHorizontal')}>\\n                <FormControlLabel\\n                  value='left'\\n                  control={<Radio />}\\n                  label='Left'\\n                />\\n                <FormControlLabel\\n                  value='center'\\n                  control={<Radio />}\\n                  label='Center'\\n                />\\n                <FormControlLabel\\n                  value='right'\\n                  control={<Radio />}\\n                  label='Right'\\n                />\\n              </RadioGroup>\\n            </FormControl>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <FormControl component='fieldset'>\\n              <FormLabel component='legend'>\\n                Transform Origin Horizontal\\n              </FormLabel>\\n              <RadioGroup\\n                row\\n                aria-label='transformOriginHorizontal'\\n                name='transformOriginHorizontal'\\n                value={this.state.transformOriginHorizontal}\\n                onChange={this.handleChange('transformOriginHorizontal')}>\\n                <FormControlLabel\\n                  value='left'\\n                  control={<Radio />}\\n                  label='Left'\\n                />\\n                <FormControlLabel\\n                  value='center'\\n                  control={<Radio />}\\n                  label='Center'\\n                />\\n                <FormControlLabel\\n                  value='right'\\n                  control={<Radio />}\\n                  label='Right'\\n                />\\n              </RadioGroup>\\n            </FormControl>\\n          </Grid>\\n        </Grid>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default AnchorPlayground;\\n\";","export default \"import React from 'react';\\nimport {makeStyles} from '@material-ui/core/styles';\\nimport Typography from '@material-ui/core/Typography';\\nimport Button from '@material-ui/core/Button';\\nimport Popover from '@material-ui/core/Popover';\\nimport PopupState, {bindPopover, bindTrigger} from 'material-ui-popup-state';\\n\\nconst useStyles = makeStyles((theme) => ({\\n  typography: {\\n    margin: theme.spacing(2),\\n  },\\n}));\\n\\nexport default function PopoverPopupState() {\\n  const classes = useStyles();\\n\\n  return (\\n    <PopupState variant='popover' popupId='demo-popup-popover'>\\n      {(popupState) => (\\n        <div>\\n          <Button variant='contained' {...bindTrigger(popupState)}>\\n            Open Popover\\n          </Button>\\n          <Popover\\n            {...bindPopover(popupState)}\\n            anchorOrigin={{\\n              vertical: 'bottom',\\n              horizontal: 'center',\\n            }}\\n            transformOrigin={{\\n              vertical: 'top',\\n              horizontal: 'center',\\n            }}>\\n            <Typography className={classes.typography}>\\n              The content of the Popover.\\n            </Typography>\\n          </Popover>\\n        </div>\\n      )}\\n    </PopupState>\\n  );\\n}\\n\";"],"sourceRoot":""}